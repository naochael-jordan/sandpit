55175156ae2612112dcc85931783ff75


'use strict';

var invariant = require('fbjs/lib/invariant');

var customBubblingEventTypes = {};
var customDirectEventTypes = {};
var eventTypes = {};

exports.customBubblingEventTypes = customBubblingEventTypes;
exports.customDirectEventTypes = customDirectEventTypes;
exports.eventTypes = eventTypes;

var viewConfigCallbacks = new Map();
var viewConfigs = new Map();

function processEventTypes(viewConfig) {
  var bubblingEventTypes = viewConfig.bubblingEventTypes,
      directEventTypes = viewConfig.directEventTypes;


  if (__DEV__) {
    if (bubblingEventTypes != null && directEventTypes != null) {
      for (var topLevelType in directEventTypes) {
        invariant(bubblingEventTypes[topLevelType] == null, 'Event cannot be both direct and bubbling: %s', topLevelType);
      }
    }
  }

  if (bubblingEventTypes != null) {
    for (var _topLevelType in bubblingEventTypes) {
      if (customBubblingEventTypes[_topLevelType] == null) {
        eventTypes[_topLevelType] = customBubblingEventTypes[_topLevelType] = bubblingEventTypes[_topLevelType];
      }
    }
  }

  if (directEventTypes != null) {
    for (var _topLevelType2 in directEventTypes) {
      if (customDirectEventTypes[_topLevelType2] == null) {
        eventTypes[_topLevelType2] = customDirectEventTypes[_topLevelType2] = directEventTypes[_topLevelType2];
      }
    }
  }
}

exports.register = function (name, callback) {
  invariant(!viewConfigCallbacks.has(name), 'Tried to register two views with the same name %s', name);
  viewConfigCallbacks.set(name, callback);
  return name;
};

exports.get = function (name) {
  var viewConfig = void 0;
  if (!viewConfigs.has(name)) {
    var callback = viewConfigCallbacks.get(name);
    if (typeof callback !== 'function') {
      invariant(false, 'View config not found for name %s.%s', name, typeof name[0] === 'string' && /[a-z]/.test(name[0]) ? ' Make sure to start component names with a capital letter.' : '');
    }
    viewConfigCallbacks.set(name, null);
    viewConfig = callback();
    processEventTypes(viewConfig);
    viewConfigs.set(name, viewConfig);
  } else {
    viewConfig = viewConfigs.get(name);
  }
  invariant(viewConfig, 'View config not found for name %s', name);
  return viewConfig;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJlYWN0TmF0aXZlVmlld0NvbmZpZ1JlZ2lzdHJ5LmpzIl0sIm5hbWVzIjpbImludmFyaWFudCIsInJlcXVpcmUiLCJjdXN0b21CdWJibGluZ0V2ZW50VHlwZXMiLCJjdXN0b21EaXJlY3RFdmVudFR5cGVzIiwiZXZlbnRUeXBlcyIsImV4cG9ydHMiLCJ2aWV3Q29uZmlnQ2FsbGJhY2tzIiwiTWFwIiwidmlld0NvbmZpZ3MiLCJwcm9jZXNzRXZlbnRUeXBlcyIsInZpZXdDb25maWciLCJidWJibGluZ0V2ZW50VHlwZXMiLCJkaXJlY3RFdmVudFR5cGVzIiwiX19ERVZfXyIsInRvcExldmVsVHlwZSIsInJlZ2lzdGVyIiwibmFtZSIsImNhbGxiYWNrIiwiaGFzIiwic2V0IiwiZ2V0IiwidGVzdCJdLCJtYXBwaW5ncyI6Ijs7QUFVQTs7QUFPQSxJQUFNQSxZQUFZQyxRQUFRLG9CQUFSLENBQWxCOztBQUdBLElBQU1DLDJCQUEyQixFQUFqQztBQUNBLElBQU1DLHlCQUF5QixFQUEvQjtBQUNBLElBQU1DLGFBQWEsRUFBbkI7O0FBRUFDLFFBQVFILHdCQUFSLEdBQW1DQSx3QkFBbkM7QUFDQUcsUUFBUUYsc0JBQVIsR0FBaUNBLHNCQUFqQztBQUNBRSxRQUFRRCxVQUFSLEdBQXFCQSxVQUFyQjs7QUFFQSxJQUFNRSxzQkFBc0IsSUFBSUMsR0FBSixFQUE1QjtBQUNBLElBQU1DLGNBQWMsSUFBSUQsR0FBSixFQUFwQjs7QUFFQSxTQUFTRSxpQkFBVCxDQUNFQyxVQURGLEVBRVE7QUFBQSxNQUNDQyxrQkFERCxHQUN5Q0QsVUFEekMsQ0FDQ0Msa0JBREQ7QUFBQSxNQUNxQkMsZ0JBRHJCLEdBQ3lDRixVQUR6QyxDQUNxQkUsZ0JBRHJCOzs7QUFHTixNQUFJQyxPQUFKLEVBQWE7QUFDWCxRQUFJRixzQkFBc0IsSUFBdEIsSUFBOEJDLG9CQUFvQixJQUF0RCxFQUE0RDtBQUMxRCxXQUFLLElBQU1FLFlBQVgsSUFBMkJGLGdCQUEzQixFQUE2QztBQUMzQ1osa0JBQ0VXLG1CQUFtQkcsWUFBbkIsS0FBb0MsSUFEdEMsRUFFRSw4Q0FGRixFQUdFQSxZQUhGO0FBS0Q7QUFDRjtBQUNGOztBQUVELE1BQUlILHNCQUFzQixJQUExQixFQUFnQztBQUM5QixTQUFLLElBQU1HLGFBQVgsSUFBMkJILGtCQUEzQixFQUErQztBQUM3QyxVQUFJVCx5QkFBeUJZLGFBQXpCLEtBQTBDLElBQTlDLEVBQW9EO0FBQ2xEVixtQkFBV1UsYUFBWCxJQUEyQloseUJBQXlCWSxhQUF6QixJQUN6QkgsbUJBQW1CRyxhQUFuQixDQURGO0FBRUQ7QUFDRjtBQUNGOztBQUVELE1BQUlGLG9CQUFvQixJQUF4QixFQUE4QjtBQUM1QixTQUFLLElBQU1FLGNBQVgsSUFBMkJGLGdCQUEzQixFQUE2QztBQUMzQyxVQUFJVCx1QkFBdUJXLGNBQXZCLEtBQXdDLElBQTVDLEVBQWtEO0FBQ2hEVixtQkFBV1UsY0FBWCxJQUEyQlgsdUJBQXVCVyxjQUF2QixJQUN6QkYsaUJBQWlCRSxjQUFqQixDQURGO0FBRUQ7QUFDRjtBQUNGO0FBQ0Y7O0FBUURULFFBQVFVLFFBQVIsR0FBbUIsVUFBU0MsSUFBVCxFQUF1QkMsUUFBdkIsRUFBMkQ7QUFDNUVqQixZQUNFLENBQUNNLG9CQUFvQlksR0FBcEIsQ0FBd0JGLElBQXhCLENBREgsRUFFRSxtREFGRixFQUdFQSxJQUhGO0FBS0FWLHNCQUFvQmEsR0FBcEIsQ0FBd0JILElBQXhCLEVBQThCQyxRQUE5QjtBQUNBLFNBQU9ELElBQVA7QUFDRCxDQVJEOztBQWVBWCxRQUFRZSxHQUFSLEdBQWMsVUFBU0osSUFBVCxFQUE2RDtBQUN6RSxNQUFJTixtQkFBSjtBQUNBLE1BQUksQ0FBQ0YsWUFBWVUsR0FBWixDQUFnQkYsSUFBaEIsQ0FBTCxFQUE0QjtBQUMxQixRQUFNQyxXQUFXWCxvQkFBb0JjLEdBQXBCLENBQXdCSixJQUF4QixDQUFqQjtBQUNBLFFBQUksT0FBT0MsUUFBUCxLQUFvQixVQUF4QixFQUFvQztBQUNsQ2pCLGdCQUNFLEtBREYsRUFFRSxzQ0FGRixFQUdFZ0IsSUFIRixFQUlFLE9BQU9BLEtBQUssQ0FBTCxDQUFQLEtBQW1CLFFBQW5CLElBQStCLFFBQVFLLElBQVIsQ0FBYUwsS0FBSyxDQUFMLENBQWIsQ0FBL0IsR0FDSSw0REFESixHQUVJLEVBTk47QUFRRDtBQUNEVix3QkFBb0JhLEdBQXBCLENBQXdCSCxJQUF4QixFQUE4QixJQUE5QjtBQUNBTixpQkFBYU8sVUFBYjtBQUNBUixzQkFBa0JDLFVBQWxCO0FBQ0FGLGdCQUFZVyxHQUFaLENBQWdCSCxJQUFoQixFQUFzQk4sVUFBdEI7QUFDRCxHQWhCRCxNQWdCTztBQUNMQSxpQkFBYUYsWUFBWVksR0FBWixDQUFnQkosSUFBaEIsQ0FBYjtBQUNEO0FBQ0RoQixZQUFVVSxVQUFWLEVBQXNCLG1DQUF0QixFQUEyRE0sSUFBM0Q7QUFDQSxTQUFPTixVQUFQO0FBQ0QsQ0F2QkQiLCJmaWxlIjoiUmVhY3ROYXRpdmVWaWV3Q29uZmlnUmVnaXN0cnkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHR5cGUge1xuICBSZWFjdE5hdGl2ZUJhc2VDb21wb25lbnRWaWV3Q29uZmlnLFxuICBWaWV3Q29uZmlnR2V0dGVyLFxufSBmcm9tICcuL1JlYWN0TmF0aXZlVHlwZXMnO1xuXG5jb25zdCBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcblxuLy8gRXZlbnQgY29uZmlnc1xuY29uc3QgY3VzdG9tQnViYmxpbmdFdmVudFR5cGVzID0ge307XG5jb25zdCBjdXN0b21EaXJlY3RFdmVudFR5cGVzID0ge307XG5jb25zdCBldmVudFR5cGVzID0ge307XG5cbmV4cG9ydHMuY3VzdG9tQnViYmxpbmdFdmVudFR5cGVzID0gY3VzdG9tQnViYmxpbmdFdmVudFR5cGVzO1xuZXhwb3J0cy5jdXN0b21EaXJlY3RFdmVudFR5cGVzID0gY3VzdG9tRGlyZWN0RXZlbnRUeXBlcztcbmV4cG9ydHMuZXZlbnRUeXBlcyA9IGV2ZW50VHlwZXM7XG5cbmNvbnN0IHZpZXdDb25maWdDYWxsYmFja3MgPSBuZXcgTWFwKCk7XG5jb25zdCB2aWV3Q29uZmlncyA9IG5ldyBNYXAoKTtcblxuZnVuY3Rpb24gcHJvY2Vzc0V2ZW50VHlwZXMoXG4gIHZpZXdDb25maWc6IFJlYWN0TmF0aXZlQmFzZUNvbXBvbmVudFZpZXdDb25maWc8Pixcbik6IHZvaWQge1xuICBjb25zdCB7YnViYmxpbmdFdmVudFR5cGVzLCBkaXJlY3RFdmVudFR5cGVzfSA9IHZpZXdDb25maWc7XG5cbiAgaWYgKF9fREVWX18pIHtcbiAgICBpZiAoYnViYmxpbmdFdmVudFR5cGVzICE9IG51bGwgJiYgZGlyZWN0RXZlbnRUeXBlcyAhPSBudWxsKSB7XG4gICAgICBmb3IgKGNvbnN0IHRvcExldmVsVHlwZSBpbiBkaXJlY3RFdmVudFR5cGVzKSB7XG4gICAgICAgIGludmFyaWFudChcbiAgICAgICAgICBidWJibGluZ0V2ZW50VHlwZXNbdG9wTGV2ZWxUeXBlXSA9PSBudWxsLFxuICAgICAgICAgICdFdmVudCBjYW5ub3QgYmUgYm90aCBkaXJlY3QgYW5kIGJ1YmJsaW5nOiAlcycsXG4gICAgICAgICAgdG9wTGV2ZWxUeXBlLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChidWJibGluZ0V2ZW50VHlwZXMgIT0gbnVsbCkge1xuICAgIGZvciAoY29uc3QgdG9wTGV2ZWxUeXBlIGluIGJ1YmJsaW5nRXZlbnRUeXBlcykge1xuICAgICAgaWYgKGN1c3RvbUJ1YmJsaW5nRXZlbnRUeXBlc1t0b3BMZXZlbFR5cGVdID09IG51bGwpIHtcbiAgICAgICAgZXZlbnRUeXBlc1t0b3BMZXZlbFR5cGVdID0gY3VzdG9tQnViYmxpbmdFdmVudFR5cGVzW3RvcExldmVsVHlwZV0gPVxuICAgICAgICAgIGJ1YmJsaW5nRXZlbnRUeXBlc1t0b3BMZXZlbFR5cGVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChkaXJlY3RFdmVudFR5cGVzICE9IG51bGwpIHtcbiAgICBmb3IgKGNvbnN0IHRvcExldmVsVHlwZSBpbiBkaXJlY3RFdmVudFR5cGVzKSB7XG4gICAgICBpZiAoY3VzdG9tRGlyZWN0RXZlbnRUeXBlc1t0b3BMZXZlbFR5cGVdID09IG51bGwpIHtcbiAgICAgICAgZXZlbnRUeXBlc1t0b3BMZXZlbFR5cGVdID0gY3VzdG9tRGlyZWN0RXZlbnRUeXBlc1t0b3BMZXZlbFR5cGVdID1cbiAgICAgICAgICBkaXJlY3RFdmVudFR5cGVzW3RvcExldmVsVHlwZV07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUmVnaXN0ZXJzIGEgbmF0aXZlIHZpZXcvY29tcG9uZW50IGJ5IG5hbWUuXG4gKiBBIGNhbGxiYWNrIGlzIHByb3ZpZGVkIHRvIGxvYWQgdGhlIHZpZXcgY29uZmlnIGZyb20gVUlNYW5hZ2VyLlxuICogVGhlIGNhbGxiYWNrIGlzIGRlZmVycmVkIHVudGlsIHRoZSB2aWV3IGlzIGFjdHVhbGx5IHJlbmRlcmVkLlxuICogVGhpcyBpcyBkb25lIHRvIGF2b2lkIGNhdXNpbmcgUHJlcGFjayBkZW9wdHMuXG4gKi9cbmV4cG9ydHMucmVnaXN0ZXIgPSBmdW5jdGlvbihuYW1lOiBzdHJpbmcsIGNhbGxiYWNrOiBWaWV3Q29uZmlnR2V0dGVyKTogc3RyaW5nIHtcbiAgaW52YXJpYW50KFxuICAgICF2aWV3Q29uZmlnQ2FsbGJhY2tzLmhhcyhuYW1lKSxcbiAgICAnVHJpZWQgdG8gcmVnaXN0ZXIgdHdvIHZpZXdzIHdpdGggdGhlIHNhbWUgbmFtZSAlcycsXG4gICAgbmFtZSxcbiAgKTtcbiAgdmlld0NvbmZpZ0NhbGxiYWNrcy5zZXQobmFtZSwgY2FsbGJhY2spO1xuICByZXR1cm4gbmFtZTtcbn07XG5cbi8qKlxuICogUmV0cmlldmVzIGEgY29uZmlnIGZvciB0aGUgc3BlY2lmaWVkIHZpZXcuXG4gKiBJZiB0aGlzIGlzIHRoZSBmaXJzdCB0aW1lIHRoZSB2aWV3IGhhcyBiZWVuIHVzZWQsXG4gKiBUaGlzIGNvbmZpZ3VyYXRpb24gd2lsbCBiZSBsYXp5LWxvYWRlZCBmcm9tIFVJTWFuYWdlci5cbiAqL1xuZXhwb3J0cy5nZXQgPSBmdW5jdGlvbihuYW1lOiBzdHJpbmcpOiBSZWFjdE5hdGl2ZUJhc2VDb21wb25lbnRWaWV3Q29uZmlnPD4ge1xuICBsZXQgdmlld0NvbmZpZztcbiAgaWYgKCF2aWV3Q29uZmlncy5oYXMobmFtZSkpIHtcbiAgICBjb25zdCBjYWxsYmFjayA9IHZpZXdDb25maWdDYWxsYmFja3MuZ2V0KG5hbWUpO1xuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgZmFsc2UsXG4gICAgICAgICdWaWV3IGNvbmZpZyBub3QgZm91bmQgZm9yIG5hbWUgJXMuJXMnLFxuICAgICAgICBuYW1lLFxuICAgICAgICB0eXBlb2YgbmFtZVswXSA9PT0gJ3N0cmluZycgJiYgL1thLXpdLy50ZXN0KG5hbWVbMF0pXG4gICAgICAgICAgPyAnIE1ha2Ugc3VyZSB0byBzdGFydCBjb21wb25lbnQgbmFtZXMgd2l0aCBhIGNhcGl0YWwgbGV0dGVyLidcbiAgICAgICAgICA6ICcnLFxuICAgICAgKTtcbiAgICB9XG4gICAgdmlld0NvbmZpZ0NhbGxiYWNrcy5zZXQobmFtZSwgbnVsbCk7XG4gICAgdmlld0NvbmZpZyA9IGNhbGxiYWNrKCk7XG4gICAgcHJvY2Vzc0V2ZW50VHlwZXModmlld0NvbmZpZyk7XG4gICAgdmlld0NvbmZpZ3Muc2V0KG5hbWUsIHZpZXdDb25maWcpO1xuICB9IGVsc2Uge1xuICAgIHZpZXdDb25maWcgPSB2aWV3Q29uZmlncy5nZXQobmFtZSk7XG4gIH1cbiAgaW52YXJpYW50KHZpZXdDb25maWcsICdWaWV3IGNvbmZpZyBub3QgZm91bmQgZm9yIG5hbWUgJXMnLCBuYW1lKTtcbiAgcmV0dXJuIHZpZXdDb25maWc7XG59O1xuIl19