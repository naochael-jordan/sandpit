9ca6de272b90569460d3cf666a9e2f31


'use strict';

var babelHelpers = global.babelHelpers = {};

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError('Cannot call a class as a function');
  }
}

babelHelpers.classCallCheck = _classCallCheck;

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ('value' in descriptor) {
      descriptor.writable = true;
    }
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) {
    _defineProperties(Constructor.prototype, protoProps);
  }
  if (staticProps) {
    _defineProperties(Constructor, staticProps);
  }
  return Constructor;
}

babelHelpers.createClass = _createClass;

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

babelHelpers.defineProperty = _defineProperty;

function _extends() {
  babelHelpers.extends = _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

babelHelpers.extends = _extends;

function _setPrototypeOf(o, p) {
  babelHelpers.setPrototypeOf = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

babelHelpers.setPrototypeOf = _setPrototypeOf;

function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = babelHelpers.getPrototypeOf(object);
    if (object === null) {
      break;
    }
  }

  return object;
}

babelHelpers.superPropBase = _superPropBase;

babelHelpers.get = function _get(target, property) {
  var receiver = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : target;

  var base = babelHelpers.superPropBase(target, property);
  if (!base) {
    return;
  }
  var desc = Object.getOwnPropertyDescriptor(base, property);

  if (desc.get) {
    return desc.get.call(receiver);
  }

  return desc.value;
};

function _inherits(subClass, superClass) {
  if (typeof superClass !== 'function' && superClass !== null) {
    throw new TypeError('Super expression must either be null or a function');
  }

  babelHelpers.setPrototypeOf(subClass.prototype, superClass && superClass.prototype);
  if (superClass) {
    babelHelpers.setPrototypeOf(subClass, superClass);
  }
}

babelHelpers.inherits = _inherits;

function _construct(Parent, args, Class) {
  babelHelpers.construct = _construct = function _construct(Parent, args, Class) {
    var a = [null];
    a.push.apply(a, args);
    var Constructor = Parent.bind.apply(Parent, a);
    var instance = new Constructor();
    if (Class) {
      babelHelpers.setPrototypeOf(instance, Class.prototype);
    }
    return instance;
  };


  return _construct.apply(null, arguments);
}

babelHelpers.construct = _construct;

function _getPrototypeOf(o) {
  babelHelpers.getPrototypeOf = _getPrototypeOf = Object.getPrototypeOf || function _getPrototypeOf(o) {
    return o.__proto__;
  };

  return _getPrototypeOf(o);
}

babelHelpers.getPrototypeOf = _getPrototypeOf;

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

babelHelpers.assertThisInitialized = _assertThisInitialized;

function _wrapNativeSuper(Class) {
  var _cache = typeof Map === 'function' ? new Map() : undefined;

  babelHelpers.wrapNativeSuper = _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (typeof Class !== 'function') {
      throw new TypeError('Super expression must either be null or a function');
    }

    if (typeof _cache !== 'undefined') {
      if (_cache.has(Class)) {
        return _cache.get(Class);
      }

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return _construct(Class, arguments, _getPrototypeOf(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return babelHelpers.setPrototypeOf(Wrapper, babelHelpers.setPrototypeOf(function Super() {
      return babelHelpers.construct(Class, arguments, babelHelpers.getPrototypeOf(this).constructor);
    }, Class));
  };

  return _wrapNativeSuper(Class);
}

babelHelpers.wrapNativeSuper = _wrapNativeSuper;

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

babelHelpers.interopRequireDefault = _interopRequireDefault;

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};

    if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};

          if (desc.get || desc.set) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
    }

    newObj.default = obj;
    return newObj;
  }
}

babelHelpers.interopRequireWildcard = _interopRequireWildcard;

function _objectWithoutProperties(source, excluded) {
  if (source == null) {
    return {};
  }
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) {
      continue;
    }
    target[key] = source[key];
  }

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) {
        continue;
      }
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) {
        continue;
      }
      target[key] = source[key];
    }
  }

  return target;
}

babelHelpers.objectWithoutProperties = _objectWithoutProperties;

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === 'object' || typeof call === 'function')) {
    return call;
  }

  return babelHelpers.assertThisInitialized(self);
}

babelHelpers.possibleConstructorReturn = _possibleConstructorReturn;

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) {
    return arr;
  }
}

babelHelpers.arrayWithHoles = _arrayWithHoles;

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }
}

babelHelpers.arrayWithoutHoles = _arrayWithoutHoles;

function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator'](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) {
        break;
      }
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i.return != null) {
        _i.return();
      }
    } finally {
      if (_d) {
        throw _e;
      }
    }
  }

  return _arr;
}

babelHelpers.iterableToArrayLimit = _iterableToArrayLimit;

function _nonIterableRest() {
  throw new TypeError('Invalid attempt to destructure non-iterable instance');
}

babelHelpers.nonIterableRest = _nonIterableRest;

function _nonIterableSpread() {
  throw new TypeError('Invalid attempt to spread non-iterable instance');
}

babelHelpers.nonIterableSpread = _nonIterableSpread;

function _slicedToArray(arr, i) {
  return babelHelpers.arrayWithHoles(arr) || babelHelpers.iterableToArrayLimit(arr, i) || babelHelpers.nonIterableRest();
}

babelHelpers.slicedToArray = _slicedToArray;

function _taggedTemplateLiteral(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  return Object.freeze(Object.defineProperties(strings, {
    raw: {
      value: Object.freeze(raw)
    }
  }));
}

babelHelpers.taggedTemplateLiteral = _taggedTemplateLiteral;

function _toArray(arr) {
  return babelHelpers.arrayWithHoles(arr) || babelHelpers.iterableToArray(arr) || babelHelpers.nonIterableRest();
}

babelHelpers.toArray = _toArray;

function _toConsumableArray(arr) {
  return babelHelpers.arrayWithoutHoles(arr) || babelHelpers.iterableToArray(arr) || babelHelpers.nonIterableSpread();
}

babelHelpers.toConsumableArray = _toConsumableArray;

function _taggedTemplateLiteralLoose(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  strings.raw = raw;
  return strings;
}

babelHelpers.taggedTemplateLiteralLoose = _taggedTemplateLiteralLoose;

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      babelHelpers.defineProperty(target, key, source[key]);
    });
  }

  return target;
}

babelHelpers.objectSpread = _objectSpread;

function _iterableToArray(iter) {
  if ((typeof Symbol === 'function' ? Symbol.iterator : '@@iterator') in Object(iter) || Object.prototype.toString.call(iter) === '[object Arguments]') {
    return Array.from(iter);
  }
}

babelHelpers.iterableToArray = _iterableToArray;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJhYmVsSGVscGVycy5qcyJdLCJuYW1lcyI6WyJiYWJlbEhlbHBlcnMiLCJnbG9iYWwiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiY2xhc3NDYWxsQ2hlY2siLCJfZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiaSIsImxlbmd0aCIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImtleSIsIl9jcmVhdGVDbGFzcyIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsInByb3RvdHlwZSIsImNyZWF0ZUNsYXNzIiwiX2RlZmluZVByb3BlcnR5Iiwib2JqIiwidmFsdWUiLCJfZXh0ZW5kcyIsImV4dGVuZHMiLCJhc3NpZ24iLCJhcmd1bWVudHMiLCJzb3VyY2UiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJhcHBseSIsIl9zZXRQcm90b3R5cGVPZiIsIm8iLCJwIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJfc3VwZXJQcm9wQmFzZSIsIm9iamVjdCIsInByb3BlcnR5IiwiZ2V0UHJvdG90eXBlT2YiLCJzdXBlclByb3BCYXNlIiwiZ2V0IiwiX2dldCIsInJlY2VpdmVyIiwiYmFzZSIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJpbmhlcml0cyIsIl9jb25zdHJ1Y3QiLCJQYXJlbnQiLCJhcmdzIiwiQ2xhc3MiLCJjb25zdHJ1Y3QiLCJhIiwicHVzaCIsImJpbmQiLCJfZ2V0UHJvdG90eXBlT2YiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwic2VsZiIsIlJlZmVyZW5jZUVycm9yIiwiYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiX3dyYXBOYXRpdmVTdXBlciIsIl9jYWNoZSIsIk1hcCIsInVuZGVmaW5lZCIsIndyYXBOYXRpdmVTdXBlciIsImhhcyIsInNldCIsIldyYXBwZXIiLCJjb25zdHJ1Y3RvciIsImNyZWF0ZSIsIlN1cGVyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJuZXdPYmoiLCJpbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwia2V5cyIsImluZGV4T2YiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzb3VyY2VTeW1ib2xLZXlzIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJvYmplY3RXaXRob3V0UHJvcGVydGllcyIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwicG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIl9hcnJheVdpdGhIb2xlcyIsImFyciIsIkFycmF5IiwiaXNBcnJheSIsImFycmF5V2l0aEhvbGVzIiwiX2FycmF5V2l0aG91dEhvbGVzIiwiYXJyMiIsImFycmF5V2l0aG91dEhvbGVzIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwiX2FyciIsIl9uIiwiX2QiLCJfZSIsIl9pIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJfcyIsIm5leHQiLCJkb25lIiwiZXJyIiwicmV0dXJuIiwiaXRlcmFibGVUb0FycmF5TGltaXQiLCJfbm9uSXRlcmFibGVSZXN0Iiwibm9uSXRlcmFibGVSZXN0IiwiX25vbkl0ZXJhYmxlU3ByZWFkIiwibm9uSXRlcmFibGVTcHJlYWQiLCJfc2xpY2VkVG9BcnJheSIsInNsaWNlZFRvQXJyYXkiLCJfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsIiwic3RyaW5ncyIsInJhdyIsInNsaWNlIiwiZnJlZXplIiwiZGVmaW5lUHJvcGVydGllcyIsInRhZ2dlZFRlbXBsYXRlTGl0ZXJhbCIsIl90b0FycmF5IiwiaXRlcmFibGVUb0FycmF5IiwidG9BcnJheSIsIl90b0NvbnN1bWFibGVBcnJheSIsInRvQ29uc3VtYWJsZUFycmF5IiwiX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbExvb3NlIiwidGFnZ2VkVGVtcGxhdGVMaXRlcmFsTG9vc2UiLCJfb2JqZWN0U3ByZWFkIiwib3duS2V5cyIsImNvbmNhdCIsImZpbHRlciIsInN5bSIsImZvckVhY2giLCJvYmplY3RTcHJlYWQiLCJfaXRlcmFibGVUb0FycmF5IiwiaXRlciIsInRvU3RyaW5nIiwiZnJvbSJdLCJtYXBwaW5ncyI6Ijs7QUE4Q0E7O0FBRUEsSUFBSUEsZUFBZ0JDLE9BQU9ELFlBQVAsR0FBc0IsRUFBMUM7O0FBSUEsU0FBU0UsZUFBVCxDQUF5QkMsUUFBekIsRUFBbUNDLFdBQW5DLEVBQWdEO0FBQzlDLE1BQUksRUFBRUQsb0JBQW9CQyxXQUF0QixDQUFKLEVBQXdDO0FBQ3RDLFVBQU0sSUFBSUMsU0FBSixDQUFjLG1DQUFkLENBQU47QUFDRDtBQUNGOztBQUVETCxhQUFhTSxjQUFiLEdBQThCSixlQUE5Qjs7QUFJQSxTQUFTSyxpQkFBVCxDQUEyQkMsTUFBM0IsRUFBbUNDLEtBQW5DLEVBQTBDO0FBQ3hDLE9BQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJRCxNQUFNRSxNQUExQixFQUFrQ0QsR0FBbEMsRUFBdUM7QUFDckMsUUFBSUUsYUFBYUgsTUFBTUMsQ0FBTixDQUFqQjtBQUNBRSxlQUFXQyxVQUFYLEdBQXdCRCxXQUFXQyxVQUFYLElBQXlCLEtBQWpEO0FBQ0FELGVBQVdFLFlBQVgsR0FBMEIsSUFBMUI7QUFDQSxRQUFJLFdBQVdGLFVBQWYsRUFBMkI7QUFDekJBLGlCQUFXRyxRQUFYLEdBQXNCLElBQXRCO0FBQ0Q7QUFDREMsV0FBT0MsY0FBUCxDQUFzQlQsTUFBdEIsRUFBOEJJLFdBQVdNLEdBQXpDLEVBQThDTixVQUE5QztBQUNEO0FBQ0Y7O0FBRUQsU0FBU08sWUFBVCxDQUFzQmYsV0FBdEIsRUFBbUNnQixVQUFuQyxFQUErQ0MsV0FBL0MsRUFBNEQ7QUFDMUQs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Z0gsR0FBeEMsRUFBNkNsSSxVQUFwRDtBQUNELE9BRkQsQ0FEUSxDQUFWO0FBS0Q7O0FBRUQrSCxZQUFRSSxPQUFSLENBQWdCLFVBQVM5SCxHQUFULEVBQWM7QUFDNUJsQixtQkFBYWlCLGNBQWIsQ0FBNEJULE1BQTVCLEVBQW9DVSxHQUFwQyxFQUF5Q2EsT0FBT2IsR0FBUCxDQUF6QztBQUNELEtBRkQ7QUFHRDs7QUFFRCxTQUFPVixNQUFQO0FBQ0Q7O0FBRURSLGFBQWFpSixZQUFiLEdBQTRCTixhQUE1Qjs7QUFJQSxTQUFTTyxnQkFBVCxDQUEwQkMsSUFBMUIsRUFBZ0M7QUFDOUIsTUFDRSx1Q0FBT25DLFFBQVAsb0JBQW1CaEcsT0FBT21JLElBQVAsQ0FBbkIsSUFDQW5JLE9BQU9NLFNBQVAsQ0FBaUI4SCxRQUFqQixDQUEwQm5ILElBQTFCLENBQStCa0gsSUFBL0IsTUFBeUMsb0JBRjNDLEVBR0U7QUFDQSxXQUFPaEQsTUFBTWtELElBQU4sQ0FBV0YsSUFBWCxDQUFQO0FBQ0Q7QUFDRjs7QUFFRG5KLGFBQWFxSSxlQUFiLEdBQStCYSxnQkFBL0IiLCJmaWxlIjoiYmFiZWxIZWxwZXJzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBSZWdlbmVyYXRlIHRocm91Z2hcbiAqICAgIGBqczEgdXBncmFkZSBiYWJlbC1oZWxwZXJzYCArIG1hbnVhbCB0d2Vha3NcbiAqXG4gKiBDb21wb25lbnRzIHVzZWQgZm9yIHRoaXMgZmlsZTtcbiAqICAgLSBhcnJheVdpdGhIb2xlc1xuICogICAtIGFycmF5V2l0aG91dEhvbGVzXG4gKiAgIC0gYXNzZXJ0VGhpc0luaXRpYWxpemVkXG4gKiAgIC0gY2xhc3NDYWxsQ2hlY2tcbiAqICAgLSBjb25zdHJ1Y3RcbiAqICAgLSBjcmVhdGVDbGFzc1xuICogICAtIGRlZmluZVByb3BlcnR5XG4gKiAgIC0gZXh0ZW5kc1xuICogICAtIGdldFxuICogICAtIGdldFByb3RvdHlwZU9mXG4gKiAgIC0gaW5oZXJpdHNcbiAqICAgLSBpbnRlcm9wUmVxdWlyZURlZmF1bHRcbiAqICAgLSBpbnRlcm9wUmVxdWlyZVdpbGRjYXJkXG4gKiAgIC0gaXRlcmFibGVUb0FycmF5XG4gKiAgIC0gaXRlcmFibGVUb0FycmF5TGltaXRcbiAqICAgLSBub25JdGVyYWJsZVJlc3RcbiAqICAgLSBub25JdGVyYWJsZVNwcmVhZFxuICogICAtIG9iamVjdFNwcmVhZFxuICogICAtIG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXG4gKiAgIC0gcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblxuICogICAtIHNldFByb3RvdHlwZU9mXG4gKiAgIC0gc2xpY2VkVG9BcnJheVxuICogICAtIHN1cGVyUHJvcEJhc2VcbiAqICAgLSB0YWdnZWRUZW1wbGF0ZUxpdGVyYWxcbiAqICAgLSB0YWdnZWRUZW1wbGF0ZUxpdGVyYWxMb29zZVxuICogICAtIHRvQXJyYXlcbiAqICAgLSB0b0NvbnN1bWFibGVBcnJheVxuICogICAtIHdyYXBOYXRpdmVTdXBlclxuICpcbiAqIEBmbG93XG4gKiBAZ2VuZXJhdGVkICh3aXRoIGJhYmVsIDcuMC4wLWJldGEuNDcpXG4gKiBAZm9ybWF0XG4gKiBAbm9saW50XG4gKiBAcG9seWZpbGxcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBiYWJlbEhlbHBlcnMgPSAoZ2xvYmFsLmJhYmVsSGVscGVycyA9IHt9KTtcblxuLy8gIyMjIGNsYXNzQ2FsbENoZWNrICMjI1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uJyk7XG4gIH1cbn1cblxuYmFiZWxIZWxwZXJzLmNsYXNzQ2FsbENoZWNrID0gX2NsYXNzQ2FsbENoZWNrO1xuXG4vLyAjIyMgY3JlYXRlQ2xhc3MgIyMjXG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoJ3ZhbHVlJyBpbiBkZXNjcmlwdG9yKSB7XG4gICAgICBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIHtcbiAgICBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICB9XG4gIGlmIChzdGF0aWNQcm9wcykge1xuICAgIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIH1cbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufVxuXG5iYWJlbEhlbHBlcnMuY3JlYXRlQ2xhc3MgPSBfY3JlYXRlQ2xhc3M7XG5cbi8vICMjIyBkZWZpbmVQcm9wZXJ0eSAjIyNcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5iYWJlbEhlbHBlcnMuZGVmaW5lUHJvcGVydHkgPSBfZGVmaW5lUHJvcGVydHk7XG5cbi8vICMjIyBleHRlbmRzICMjI1xuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgYmFiZWxIZWxwZXJzLmV4dGVuZHMgPSBfZXh0ZW5kcyA9XG4gICAgT2JqZWN0LmFzc2lnbiB8fFxuICAgIGZ1bmN0aW9uKHRhcmdldCkge1xuICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuYmFiZWxIZWxwZXJzLmV4dGVuZHMgPSBfZXh0ZW5kcztcblxuLy8gIyMjIHNldFByb3RvdHlwZU9mICMjI1xuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBiYWJlbEhlbHBlcnMuc2V0UHJvdG90eXBlT2YgPSBfc2V0UHJvdG90eXBlT2YgPVxuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgIGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgICByZXR1cm4gbztcbiAgICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59XG5cbmJhYmVsSGVscGVycy5zZXRQcm90b3R5cGVPZiA9IF9zZXRQcm90b3R5cGVPZjtcblxuLy8gIyMjIHN1cGVyUHJvcEJhc2UgIyMjXG5cbmZ1bmN0aW9uIF9zdXBlclByb3BCYXNlKG9iamVjdCwgcHJvcGVydHkpIHtcbiAgd2hpbGUgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSkpIHtcbiAgICBvYmplY3QgPSBiYWJlbEhlbHBlcnMuZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTtcbiAgICBpZiAob2JqZWN0ID09PSBudWxsKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqZWN0O1xufVxuXG5iYWJlbEhlbHBlcnMuc3VwZXJQcm9wQmFzZSA9IF9zdXBlclByb3BCYXNlO1xuXG4vLyAjIyMgZ2V0ICMjI1xuXG4vLyBGQjpcbi8vIFRPRE86IHByZXBhY2sgZG9lcyBub3QgbGlrZSBSZWZsZWN0IChhbmQgd2UgY2FuIHVzZSB0aGUgZmFsbGJhY2sganVzdCBmaW5lKVxuLy8gZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikge1xuLy8gICBpZiAodHlwZW9mIFJlZmxlY3QgIT09ICd1bmRlZmluZWQnICYmIFJlZmxlY3QuZ2V0KSB7XG4vLyAgICAgYmFiZWxIZWxwZXJzLmdldCA9IF9nZXQgPSBSZWZsZWN0LmdldDtcbi8vICAgfSBlbHNlIHtcbi8vICAgICBiYWJlbEhlbHBlcnMuZ2V0ID0gX2dldCA9IGZ1bmN0aW9uIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHtcbi8vICAgICAgIHZhciBiYXNlID0gYmFiZWxIZWxwZXJzLnN1cGVyUHJvcEJhc2UodGFyZ2V0LCBwcm9wZXJ0eSk7XG4vLyAgICAgICBpZiAoIWJhc2UpIHtcbi8vICAgICAgICAgcmV0dXJuO1xuLy8gICAgICAgfVxuLy8gICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGJhc2UsIHByb3BlcnR5KTtcbi8vXG4vLyAgICAgICBpZiAoZGVzYy5nZXQpIHtcbi8vICAgICAgICAgcmV0dXJuIGRlc2MuZ2V0LmNhbGwocmVjZWl2ZXIpO1xuLy8gICAgICAgfVxuLy9cbi8vICAgICAgIHJldHVybiBkZXNjLnZhbHVlO1xuLy8gICAgIH07XG4vLyAgIH1cbi8vXG4vLyAgIHJldHVybiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHJlY2VpdmVyIHx8IHRhcmdldCk7XG4vLyB9XG4vL1xuLy8gYmFiZWxIZWxwZXJzLmdldCA9IF9nZXQ7XG5cbmJhYmVsSGVscGVycy5nZXQgPSBmdW5jdGlvbiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHJlY2VpdmVyID0gdGFyZ2V0KSB7XG4gIHZhciBiYXNlID0gYmFiZWxIZWxwZXJzLnN1cGVyUHJvcEJhc2UodGFyZ2V0LCBwcm9wZXJ0eSk7XG4gIGlmICghYmFzZSkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZSwgcHJvcGVydHkpO1xuXG4gIGlmIChkZXNjLmdldCkge1xuICAgIHJldHVybiBkZXNjLmdldC5jYWxsKHJlY2VpdmVyKTtcbiAgfVxuXG4gIHJldHVybiBkZXNjLnZhbHVlO1xufTtcblxuLy8gIyMjIGluaGVyaXRzICMjI1xuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAnZnVuY3Rpb24nICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgYmFiZWxIZWxwZXJzLnNldFByb3RvdHlwZU9mKFxuICAgIHN1YkNsYXNzLnByb3RvdHlwZSxcbiAgICBzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLFxuICApO1xuICBpZiAoc3VwZXJDbGFzcykge1xuICAgIGJhYmVsSGVscGVycy5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG4gIH1cbn1cblxuYmFiZWxIZWxwZXJzLmluaGVyaXRzID0gX2luaGVyaXRzO1xuXG4vLyAjIyMgY29uc3RydWN0ICMjI1xuXG5mdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHtcbiAgLy8gRkI6XG4gIC8vIFRPRE86IHByZXBhY2sgZG9lcyBub3QgbGlrZSB0aGlzIGxpbmUgKGFuZCB3ZSBjYW4gdXNlIHRoZSBmYWxsYmFjayBqdXN0IGZpbmUpXG4gIC8vIGlmICh0eXBlb2YgUmVmbGVjdCAhPT0gJ3VuZGVmaW5lZCcgJiYgUmVmbGVjdC5jb25zdHJ1Y3QpIHtcbiAgLy8gICBiYWJlbEhlbHBlcnMuY29uc3RydWN0ID0gX2NvbnN0cnVjdCA9IFJlZmxlY3QuY29uc3RydWN0O1xuICAvLyB9IGVsc2Uge1xuICBiYWJlbEhlbHBlcnMuY29uc3RydWN0ID0gX2NvbnN0cnVjdCA9IGZ1bmN0aW9uIF9jb25zdHJ1Y3QoXG4gICAgUGFyZW50LFxuICAgIGFyZ3MsXG4gICAgQ2xhc3MsXG4gICkge1xuICAgIHZhciBhID0gW251bGxdO1xuICAgIGEucHVzaC5hcHBseShhLCBhcmdzKTtcbiAgICB2YXIgQ29uc3RydWN0b3IgPSBQYXJlbnQuYmluZC5hcHBseShQYXJlbnQsIGEpO1xuICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDb25zdHJ1Y3RvcigpO1xuICAgIGlmIChDbGFzcykge1xuICAgICAgYmFiZWxIZWxwZXJzLnNldFByb3RvdHlwZU9mKGluc3RhbmNlLCBDbGFzcy5wcm90b3R5cGUpO1xuICAgIH1cbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH07XG4gIC8vIH1cblxuICByZXR1cm4gX2NvbnN0cnVjdC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xufVxuXG5iYWJlbEhlbHBlcnMuY29uc3RydWN0ID0gX2NvbnN0cnVjdDtcblxuLy8gIyMjIGdldFByb3RvdHlwZU9mICMjI1xuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICBiYWJlbEhlbHBlcnMuZ2V0UHJvdG90eXBlT2YgPSBfZ2V0UHJvdG90eXBlT2YgPVxuICAgIE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fFxuICAgIGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gICAgICByZXR1cm4gby5fX3Byb3RvX187XG4gICAgfTtcblxuICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pO1xufVxuXG5iYWJlbEhlbHBlcnMuZ2V0UHJvdG90eXBlT2YgPSBfZ2V0UHJvdG90eXBlT2Y7XG5cbi8vICMjIyBhc3NlcnRUaGlzSW5pdGlhbGl6ZWQgIyMjXG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFxuICAgICAgXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIixcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59XG5cbmJhYmVsSGVscGVycy5hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkO1xuXG4vLyAjIyMgd3JhcE5hdGl2ZVN1cGVyICMjI1xuXG5mdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKSB7XG4gIHZhciBfY2FjaGUgPSB0eXBlb2YgTWFwID09PSAnZnVuY3Rpb24nID8gbmV3IE1hcCgpIDogdW5kZWZpbmVkO1xuXG4gIGJhYmVsSGVscGVycy53cmFwTmF0aXZlU3VwZXIgPSBfd3JhcE5hdGl2ZVN1cGVyID0gZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihcbiAgICBDbGFzcyxcbiAgKSB7XG4gICAgaWYgKHR5cGVvZiBDbGFzcyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIF9jYWNoZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmIChfY2FjaGUuaGFzKENsYXNzKSkge1xuICAgICAgICByZXR1cm4gX2NhY2hlLmdldChDbGFzcyk7XG4gICAgICB9XG5cbiAgICAgIF9jYWNoZS5zZXQoQ2xhc3MsIFdyYXBwZXIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIFdyYXBwZXIoKSB7XG4gICAgICAvLyBGQjpcbiAgICAgIC8vIHRoaXMgaXMgYSB0ZW1wb3JhcnkgZml4IGZvciBhIGJhYmVsIGJ1ZyAoaXQncyBpbnZva2luZyB0aGUgd3JvbmcgZnVuY1xuICAgICAgLy8gd2hlbiB5b3UgZG8gYHN1cGVyKClgKVxuICAgICAgcmV0dXJuIF9jb25zdHJ1Y3QoQ2xhc3MsIGFyZ3VtZW50cywgX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yKTtcbiAgICB9XG5cbiAgICBXcmFwcGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQ2xhc3MucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogV3JhcHBlcixcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB9LFxuICAgIH0pO1xuICAgIHJldHVybiBiYWJlbEhlbHBlcnMuc2V0UHJvdG90eXBlT2YoXG4gICAgICBXcmFwcGVyLFxuICAgICAgYmFiZWxIZWxwZXJzLnNldFByb3RvdHlwZU9mKGZ1bmN0aW9uIFN1cGVyKCkge1xuICAgICAgICByZXR1cm4gYmFiZWxIZWxwZXJzLmNvbnN0cnVjdChcbiAgICAgICAgICBDbGFzcyxcbiAgICAgICAgICBhcmd1bWVudHMsXG4gICAgICAgICAgYmFiZWxIZWxwZXJzLmdldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yLFxuICAgICAgICApO1xuICAgICAgfSwgQ2xhc3MpLFxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpO1xufVxuXG5iYWJlbEhlbHBlcnMud3JhcE5hdGl2ZVN1cGVyID0gX3dyYXBOYXRpdmVTdXBlcjtcblxuLy8gIyMjIGludGVyb3BSZXF1aXJlRGVmYXVsdCAjIyNcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZVxuICAgID8gb2JqXG4gICAgOiB7XG4gICAgICAgIGRlZmF1bHQ6IG9iaixcbiAgICAgIH07XG59XG5cbmJhYmVsSGVscGVycy5pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0O1xuXG4vLyAjIyMgaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCAjIyNcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7XG4gIGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHtcbiAgICByZXR1cm4gb2JqO1xuICB9IGVsc2Uge1xuICAgIHZhciBuZXdPYmogPSB7fTtcblxuICAgIGlmIChvYmogIT0gbnVsbCkge1xuICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICAgIHZhciBkZXNjID1cbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yXG4gICAgICAgICAgICAgID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSlcbiAgICAgICAgICAgICAgOiB7fTtcblxuICAgICAgICAgIGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3T2JqW2tleV0gPSBvYmpba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBuZXdPYmouZGVmYXVsdCA9IG9iajtcbiAgICByZXR1cm4gbmV3T2JqO1xuICB9XG59XG5cbmJhYmVsSGVscGVycy5pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQ7XG5cbi8vICMjIyBvYmplY3RXaXRob3V0UHJvcGVydGllcyAjIyNcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldO1xuICAgICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5iYWJlbEhlbHBlcnMub2JqZWN0V2l0aG91dFByb3BlcnRpZXMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXM7XG5cbi8vICMjIyBwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuICMjI1xuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gIGlmIChjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIGNhbGwgPT09ICdmdW5jdGlvbicpKSB7XG4gICAgcmV0dXJuIGNhbGw7XG4gIH1cblxuICByZXR1cm4gYmFiZWxIZWxwZXJzLmFzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTtcbn1cblxuYmFiZWxIZWxwZXJzLnBvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjtcblxuLy8gIyMjIGFycmF5V2l0aEhvbGVzICMjI1xuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICByZXR1cm4gYXJyO1xuICB9XG59XG5cbmJhYmVsSGVscGVycy5hcnJheVdpdGhIb2xlcyA9IF9hcnJheVdpdGhIb2xlcztcblxuLy8gIyMjIGFycmF5V2l0aG91dEhvbGVzICMjI1xuXG5mdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgYXJyMltpXSA9IGFycltpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyMjtcbiAgfVxufVxuXG5iYWJlbEhlbHBlcnMuYXJyYXlXaXRob3V0SG9sZXMgPSBfYXJyYXlXaXRob3V0SG9sZXM7XG5cbi8vICMjIyBpdGVyYWJsZVRvQXJyYXlMaW1pdCAjIyNcblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkge1xuICB2YXIgX2FyciA9IFtdO1xuICB2YXIgX24gPSB0cnVlO1xuICB2YXIgX2QgPSBmYWxzZTtcbiAgdmFyIF9lID0gdW5kZWZpbmVkO1xuXG4gIHRyeSB7XG4gICAgZm9yIChcbiAgICAgIHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zO1xuICAgICAgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7XG4gICAgICBfbiA9IHRydWVcbiAgICApIHtcbiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7XG5cbiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2QgPSB0cnVlO1xuICAgIF9lID0gZXJyO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIV9uICYmIF9pLnJldHVybiAhPSBudWxsKSB7XG4gICAgICAgIF9pLnJldHVybigpO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2QpIHtcbiAgICAgICAgdGhyb3cgX2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIF9hcnI7XG59XG5cbmJhYmVsSGVscGVycy5pdGVyYWJsZVRvQXJyYXlMaW1pdCA9IF9pdGVyYWJsZVRvQXJyYXlMaW1pdDtcblxuLy8gIyMjIG5vbkl0ZXJhYmxlUmVzdCAjIyNcblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZScpO1xufVxuXG5iYWJlbEhlbHBlcnMubm9uSXRlcmFibGVSZXN0ID0gX25vbkl0ZXJhYmxlUmVzdDtcblxuLy8gIyMjIG5vbkl0ZXJhYmxlU3ByZWFkICMjI1xuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlJyk7XG59XG5cbmJhYmVsSGVscGVycy5ub25JdGVyYWJsZVNwcmVhZCA9IF9ub25JdGVyYWJsZVNwcmVhZDtcblxuLy8gIyMjIHNsaWNlZFRvQXJyYXkgIyMjXG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkge1xuICByZXR1cm4gKFxuICAgIGJhYmVsSGVscGVycy5hcnJheVdpdGhIb2xlcyhhcnIpIHx8XG4gICAgYmFiZWxIZWxwZXJzLml0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHxcbiAgICBiYWJlbEhlbHBlcnMubm9uSXRlcmFibGVSZXN0KClcbiAgKTtcbn1cblxuYmFiZWxIZWxwZXJzLnNsaWNlZFRvQXJyYXkgPSBfc2xpY2VkVG9BcnJheTtcblxuLy8gIyMjIHRhZ2dlZFRlbXBsYXRlTGl0ZXJhbCAjIyNcblxuZnVuY3Rpb24gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbChzdHJpbmdzLCByYXcpIHtcbiAgaWYgKCFyYXcpIHtcbiAgICByYXcgPSBzdHJpbmdzLnNsaWNlKDApO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5mcmVlemUoXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoc3RyaW5ncywge1xuICAgICAgcmF3OiB7XG4gICAgICAgIHZhbHVlOiBPYmplY3QuZnJlZXplKHJhdyksXG4gICAgICB9LFxuICAgIH0pLFxuICApO1xufVxuXG5iYWJlbEhlbHBlcnMudGFnZ2VkVGVtcGxhdGVMaXRlcmFsID0gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbDtcblxuLy8gIyMjIHRvQXJyYXkgIyMjXG5cbmZ1bmN0aW9uIF90b0FycmF5KGFycikge1xuICByZXR1cm4gKFxuICAgIGJhYmVsSGVscGVycy5hcnJheVdpdGhIb2xlcyhhcnIpIHx8XG4gICAgYmFiZWxIZWxwZXJzLml0ZXJhYmxlVG9BcnJheShhcnIpIHx8XG4gICAgYmFiZWxIZWxwZXJzLm5vbkl0ZXJhYmxlUmVzdCgpXG4gICk7XG59XG5cbmJhYmVsSGVscGVycy50b0FycmF5ID0gX3RvQXJyYXk7XG5cbi8vICMjIyB0b0NvbnN1bWFibGVBcnJheSAjIyNcblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gKFxuICAgIGJhYmVsSGVscGVycy5hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8XG4gICAgYmFiZWxIZWxwZXJzLml0ZXJhYmxlVG9BcnJheShhcnIpIHx8XG4gICAgYmFiZWxIZWxwZXJzLm5vbkl0ZXJhYmxlU3ByZWFkKClcbiAgKTtcbn1cblxuYmFiZWxIZWxwZXJzLnRvQ29uc3VtYWJsZUFycmF5ID0gX3RvQ29uc3VtYWJsZUFycmF5O1xuXG4vLyAjIyMgdGFnZ2VkVGVtcGxhdGVMaXRlcmFsTG9vc2UgIyMjXG5cbmZ1bmN0aW9uIF90YWdnZWRUZW1wbGF0ZUxpdGVyYWxMb29zZShzdHJpbmdzLCByYXcpIHtcbiAgaWYgKCFyYXcpIHtcbiAgICByYXcgPSBzdHJpbmdzLnNsaWNlKDApO1xuICB9XG5cbiAgc3RyaW5ncy5yYXcgPSByYXc7XG4gIHJldHVybiBzdHJpbmdzO1xufVxuXG5iYWJlbEhlbHBlcnMudGFnZ2VkVGVtcGxhdGVMaXRlcmFsTG9vc2UgPSBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsTG9vc2U7XG5cbi8vICMjIyBvYmplY3RTcHJlYWQgIyMjXG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG4gICAgdmFyIG93bktleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuXG4gICAgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvd25LZXlzID0gb3duS2V5cy5jb25jYXQoXG4gICAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKS5maWx0ZXIoZnVuY3Rpb24oc3ltKSB7XG4gICAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7XG4gICAgICAgIH0pLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICBiYWJlbEhlbHBlcnMuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmJhYmVsSGVscGVycy5vYmplY3RTcHJlYWQgPSBfb2JqZWN0U3ByZWFkO1xuXG4vLyAjIyMgaXRlcmFibGVUb0FycmF5ICMjI1xuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKFxuICAgIFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikgfHxcbiAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09ICdbb2JqZWN0IEFyZ3VtZW50c10nXG4gICkge1xuICAgIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xuICB9XG59XG5cbmJhYmVsSGVscGVycy5pdGVyYWJsZVRvQXJyYXkgPSBfaXRlcmFibGVUb0FycmF5O1xuIl19