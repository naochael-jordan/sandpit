8fc4a009bb0b0300fa9d0e833750ad79


'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var ColorPropType = require('ColorPropType');
var LayoutPropTypes = require('LayoutPropTypes');
var ReactPropTypes = require('prop-types');
var ShadowPropTypesIOS = require('ShadowPropTypesIOS');
var TransformPropTypes = require('TransformPropTypes');

var ViewStylePropTypes = _extends({}, LayoutPropTypes, ShadowPropTypesIOS, TransformPropTypes, {
  backfaceVisibility: ReactPropTypes.oneOf(['visible', 'hidden']),
  backgroundColor: ColorPropType,
  borderColor: ColorPropType,
  borderTopColor: ColorPropType,
  borderRightColor: ColorPropType,
  borderBottomColor: ColorPropType,
  borderLeftColor: ColorPropType,
  borderStartColor: ColorPropType,
  borderEndColor: ColorPropType,
  borderRadius: ReactPropTypes.number,
  borderTopLeftRadius: ReactPropTypes.number,
  borderTopRightRadius: ReactPropTypes.number,
  borderTopStartRadius: ReactPropTypes.number,
  borderTopEndRadius: ReactPropTypes.number,
  borderBottomLeftRadius: ReactPropTypes.number,
  borderBottomRightRadius: ReactPropTypes.number,
  borderBottomStartRadius: ReactPropTypes.number,
  borderBottomEndRadius: ReactPropTypes.number,
  borderStyle: ReactPropTypes.oneOf(['solid', 'dotted', 'dashed']),
  borderWidth: ReactPropTypes.number,
  borderTopWidth: ReactPropTypes.number,
  borderRightWidth: ReactPropTypes.number,
  borderBottomWidth: ReactPropTypes.number,
  borderLeftWidth: ReactPropTypes.number,
  opacity: ReactPropTypes.number,

  elevation: ReactPropTypes.number
});

module.exports = ViewStylePropTypes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlZpZXdTdHlsZVByb3BUeXBlcy5qcyJdLCJuYW1lcyI6WyJDb2xvclByb3BUeXBlIiwicmVxdWlyZSIsIkxheW91dFByb3BUeXBlcyIsIlJlYWN0UHJvcFR5cGVzIiwiU2hhZG93UHJvcFR5cGVzSU9TIiwiVHJhbnNmb3JtUHJvcFR5cGVzIiwiVmlld1N0eWxlUHJvcFR5cGVzIiwiYmFja2ZhY2VWaXNpYmlsaXR5Iiwib25lT2YiLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXJDb2xvciIsImJvcmRlclRvcENvbG9yIiwiYm9yZGVyUmlnaHRDb2xvciIsImJvcmRlckJvdHRvbUNvbG9yIiwiYm9yZGVyTGVmdENvbG9yIiwiYm9yZGVyU3RhcnRDb2xvciIsImJvcmRlckVuZENvbG9yIiwiYm9yZGVyUmFkaXVzIiwibnVtYmVyIiwiYm9yZGVyVG9wTGVmdFJhZGl1cyIsImJvcmRlclRvcFJpZ2h0UmFkaXVzIiwiYm9yZGVyVG9wU3RhcnRSYWRpdXMiLCJib3JkZXJUb3BFbmRSYWRpdXMiLCJib3JkZXJCb3R0b21MZWZ0UmFkaXVzIiwiYm9yZGVyQm90dG9tUmlnaHRSYWRpdXMiLCJib3JkZXJCb3R0b21TdGFydFJhZGl1cyIsImJvcmRlckJvdHRvbUVuZFJhZGl1cyIsImJvcmRlclN0eWxlIiwiYm9yZGVyV2lkdGgiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlclJpZ2h0V2lkdGgiLCJib3JkZXJCb3R0b21XaWR0aCIsImJvcmRlckxlZnRXaWR0aCIsIm9wYWNpdHkiLCJlbGV2YXRpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQVVBOzs7O0FBRUEsSUFBTUEsZ0JBQWdCQyxRQUFRLGVBQVIsQ0FBdEI7QUFDQSxJQUFNQyxrQkFBa0JELFFBQVEsaUJBQVIsQ0FBeEI7QUFDQSxJQUFNRSxpQkFBaUJGLFFBQVEsWUFBUixDQUF2QjtBQUNBLElBQU1HLHFCQUFxQkgsUUFBUSxvQkFBUixDQUEzQjtBQUNBLElBQU1JLHFCQUFxQkosUUFBUSxvQkFBUixDQUEzQjs7QUFLQSxJQUFNSyxrQ0FDREosZUFEQyxFQUVERSxrQkFGQyxFQUdEQyxrQkFIQztBQUlKRSxzQkFBb0JKLGVBQWVLLEtBQWYsQ0FBcUIsQ0FBQyxTQUFELEVBQVksUUFBWixDQUFyQixDQUpoQjtBQUtKQyxtQkFBaUJULGFBTGI7QUFNSlUsZUFBYVYsYUFOVDtBQU9KVyxrQkFBZ0JYLGFBUFo7QUFRSlksb0JBQWtCWixhQVJkO0FBU0phLHFCQUFtQmIsYUFUZjtBQVVKYyxtQkFBaUJkLGFBVmI7QUFXSmUsb0JBQWtCZixhQVhkO0FBWUpnQixrQkFBZ0JoQixhQVpaO0FBYUppQixnQkFBY2QsZUFBZWUsTUFiekI7QUFjSkMsdUJBQXFCaEIsZUFBZWUsTUFkaEM7QUFlSkUsd0JBQXNCakIsZUFBZWUsTUFmakM7QUFnQkpHLHdCQUFzQmxCLGVBQWVlLE1BaEJqQztBQWlCSkksc0JBQW9CbkIsZUFBZWUsTUFqQi9CO0FBa0JKSywwQkFBd0JwQixlQUFlZSxNQWxCbkM7QUFtQkpNLDJCQUF5QnJCLGVBQWVlLE1BbkJwQztBQW9CSk8sMkJBQXlCdEIsZUFBZWUsTUFwQnBDO0FBcUJKUSx5QkFBdUJ2QixlQUFlZSxNQXJCbEM7QUFzQkpTLGVBQWF4QixlQUFlSyxLQUFmLENBQXFCLENBQUMsT0FBRCxFQUFVLFFBQVYsRUFBb0IsUUFBcEIsQ0FBckIsQ0F0QlQ7QUF1QkpvQixlQUFhekIsZUFBZWUsTUF2QnhCO0FBd0JKVyxrQkFBZ0IxQixlQUFlZSxNQXhCM0I7QUF5QkpZLG9CQUFrQjNCLGVBQWVlLE1BekI3QjtBQTBCSmEscUJBQW1CNUIsZUFBZWUsTUExQjlCO0FBMkJKYyxtQkFBaUI3QixlQUFlZSxNQTNCNUI7QUE0QkplLFdBQVM5QixlQUFlZSxNQTVCcEI7O0FBb0NKZ0IsYUFBVy9CLGVBQWVlO0FBcEN0QixFQUFOOztBQXVDQWlCLE9BQU9DLE9BQVAsR0FBaUI5QixrQkFBakIiLCJmaWxlIjoiVmlld1N0eWxlUHJvcFR5cGVzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvd1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgQ29sb3JQcm9wVHlwZSA9IHJlcXVpcmUoJ0NvbG9yUHJvcFR5cGUnKTtcbmNvbnN0IExheW91dFByb3BUeXBlcyA9IHJlcXVpcmUoJ0xheW91dFByb3BUeXBlcycpO1xuY29uc3QgUmVhY3RQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5jb25zdCBTaGFkb3dQcm9wVHlwZXNJT1MgPSByZXF1aXJlKCdTaGFkb3dQcm9wVHlwZXNJT1MnKTtcbmNvbnN0IFRyYW5zZm9ybVByb3BUeXBlcyA9IHJlcXVpcmUoJ1RyYW5zZm9ybVByb3BUeXBlcycpO1xuXG4vKipcbiAqIFdhcm5pbmc6IFNvbWUgb2YgdGhlc2UgcHJvcGVydGllcyBtYXkgbm90IGJlIHN1cHBvcnRlZCBpbiBhbGwgcmVsZWFzZXMuXG4gKi9cbmNvbnN0IFZpZXdTdHlsZVByb3BUeXBlcyA9IHtcbiAgLi4uTGF5b3V0UHJvcFR5cGVzLFxuICAuLi5TaGFkb3dQcm9wVHlwZXNJT1MsXG4gIC4uLlRyYW5zZm9ybVByb3BUeXBlcyxcbiAgYmFja2ZhY2VWaXNpYmlsaXR5OiBSZWFjdFByb3BUeXBlcy5vbmVPZihbJ3Zpc2libGUnLCAnaGlkZGVuJ10pLFxuICBiYWNrZ3JvdW5kQ29sb3I6IENvbG9yUHJvcFR5cGUsXG4gIGJvcmRlckNvbG9yOiBDb2xvclByb3BUeXBlLFxuICBib3JkZXJUb3BDb2xvcjogQ29sb3JQcm9wVHlwZSxcbiAgYm9yZGVyUmlnaHRDb2xvcjogQ29sb3JQcm9wVHlwZSxcbiAgYm9yZGVyQm90dG9tQ29sb3I6IENvbG9yUHJvcFR5cGUsXG4gIGJvcmRlckxlZnRDb2xvcjogQ29sb3JQcm9wVHlwZSxcbiAgYm9yZGVyU3RhcnRDb2xvcjogQ29sb3JQcm9wVHlwZSxcbiAgYm9yZGVyRW5kQ29sb3I6IENvbG9yUHJvcFR5cGUsXG4gIGJvcmRlclJhZGl1czogUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICBib3JkZXJUb3BMZWZ0UmFkaXVzOiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gIGJvcmRlclRvcFN0YXJ0UmFkaXVzOiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gIGJvcmRlclRvcEVuZFJhZGl1czogUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICBib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gIGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzOiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gIGJvcmRlckJvdHRvbVN0YXJ0UmFkaXVzOiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gIGJvcmRlckJvdHRvbUVuZFJhZGl1czogUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICBib3JkZXJTdHlsZTogUmVhY3RQcm9wVHlwZXMub25lT2YoWydzb2xpZCcsICdkb3R0ZWQnLCAnZGFzaGVkJ10pLFxuICBib3JkZXJXaWR0aDogUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICBib3JkZXJUb3BXaWR0aDogUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICBib3JkZXJSaWdodFdpZHRoOiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gIGJvcmRlckJvdHRvbVdpZHRoOiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gIGJvcmRlckxlZnRXaWR0aDogUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICBvcGFjaXR5OiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gIC8qKlxuICAgKiAoQW5kcm9pZC1vbmx5KSBTZXRzIHRoZSBlbGV2YXRpb24gb2YgYSB2aWV3LCB1c2luZyBBbmRyb2lkJ3MgdW5kZXJseWluZ1xuICAgKiBbZWxldmF0aW9uIEFQSV0oaHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdHJhaW5pbmcvbWF0ZXJpYWwvc2hhZG93cy1jbGlwcGluZy5odG1sI0VsZXZhdGlvbikuXG4gICAqIFRoaXMgYWRkcyBhIGRyb3Agc2hhZG93IHRvIHRoZSBpdGVtIGFuZCBhZmZlY3RzIHotb3JkZXIgZm9yIG92ZXJsYXBwaW5nIHZpZXdzLlxuICAgKiBPbmx5IHN1cHBvcnRlZCBvbiBBbmRyb2lkIDUuMCssIGhhcyBubyBlZmZlY3Qgb24gZWFybGllciB2ZXJzaW9ucy5cbiAgICogQHBsYXRmb3JtIGFuZHJvaWRcbiAgICovXG4gIGVsZXZhdGlvbjogUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBWaWV3U3R5bGVQcm9wVHlwZXM7XG4iXX0=