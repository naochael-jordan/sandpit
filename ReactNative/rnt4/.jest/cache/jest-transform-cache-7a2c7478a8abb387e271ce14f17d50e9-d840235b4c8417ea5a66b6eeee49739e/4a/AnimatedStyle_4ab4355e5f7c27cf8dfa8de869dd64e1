3820da6273a90e923ab22987f1fd0a31

'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AnimatedNode = require('./AnimatedNode');
var AnimatedTransform = require('./AnimatedTransform');
var AnimatedWithChildren = require('./AnimatedWithChildren');
var NativeAnimatedHelper = require('../NativeAnimatedHelper');

var flattenStyle = require('flattenStyle');

var AnimatedStyle = function (_AnimatedWithChildren) {
  _inherits(AnimatedStyle, _AnimatedWithChildren);

  function AnimatedStyle(style) {
    _classCallCheck(this, AnimatedStyle);

    var _this = _possibleConstructorReturn(this, (AnimatedStyle.__proto__ || Object.getPrototypeOf(AnimatedStyle)).call(this));

    style = flattenStyle(style) || {};
    if (style.transform) {
      style = _extends({}, style, {
        transform: new AnimatedTransform(style.transform)
      });
    }
    _this._style = style;
    return _this;
  }

  _createClass(AnimatedStyle, [{
    key: '_walkStyleAndGetValues',
    value: function _walkStyleAndGetValues(style) {
      var updatedStyle = {};
      for (var key in style) {
        var value = style[key];
        if (value instanceof AnimatedNode) {
          if (!value.__isNative) {
            updatedStyle[key] = value.__getValue();
          }
        } else if (value && !Array.isArray(value) && typeof value === 'object') {
          updatedStyle[key] = this._walkStyleAndGetValues(value);
        } else {
          updatedStyle[key] = value;
        }
      }
      return updatedStyle;
    }
  }, {
    key: '__getValue',
    value: function __getValue() {
      return this._walkStyleAndGetValues(this._style);
    }
  }, {
    key: '_walkStyleAndGetAnimatedValues',
    value: function _walkStyleAndGetAnimatedValues(style) {
      var updatedStyle = {};
      for (var key in style) {
        var value = style[key];
        if (value instanceof AnimatedNode) {
          updatedStyle[key] = value.__getAnimatedValue();
        } else if (value && !Array.isArray(value) && typeof value === 'object') {
          updatedStyle[key] = this._walkStyleAndGetAnimatedValues(value);
        }
      }
      return updatedStyle;
    }
  }, {
    key: '__getAnimatedValue',
    value: function __getAnimatedValue() {
      return this._walkStyleAndGetAnimatedValues(this._style);
    }
  }, {
    key: '__attach',
    value: function __attach() {
      for (var key in this._style) {
        var value = this._style[key];
        if (value instanceof AnimatedNode) {
          value.__addChild(this);
        }
      }
    }
  }, {
    key: '__detach',
    value: function __detach() {
      for (var key in this._style) {
        var value = this._style[key];
        if (value instanceof AnimatedNode) {
          value.__removeChild(this);
        }
      }
      _get(AnimatedStyle.prototype.__proto__ || Object.getPrototypeOf(AnimatedStyle.prototype), '__detach', this).call(this);
    }
  }, {
    key: '__makeNative',
    value: function __makeNative() {
      for (var key in this._style) {
        var value = this._style[key];
        if (value instanceof AnimatedNode) {
          value.__makeNative();
        }
      }
      _get(AnimatedStyle.prototype.__proto__ || Object.getPrototypeOf(AnimatedStyle.prototype), '__makeNative', this).call(this);
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      var styleConfig = {};
      for (var styleKey in this._style) {
        if (this._style[styleKey] instanceof AnimatedNode) {
          styleConfig[styleKey] = this._style[styleKey].__getNativeTag();
        }
      }
      NativeAnimatedHelper.validateStyles(styleConfig);
      return {
        type: 'style',
        style: styleConfig
      };
    }
  }]);

  return AnimatedStyle;
}(AnimatedWithChildren);

module.exports = AnimatedStyle;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFuaW1hdGVkU3R5bGUuanMiXSwibmFtZXMiOlsiQW5pbWF0ZWROb2RlIiwicmVxdWlyZSIsIkFuaW1hdGVkVHJhbnNmb3JtIiwiQW5pbWF0ZWRXaXRoQ2hpbGRyZW4iLCJOYXRpdmVBbmltYXRlZEhlbHBlciIsImZsYXR0ZW5TdHlsZSIsIkFuaW1hdGVkU3R5bGUiLCJzdHlsZSIsInRyYW5zZm9ybSIsIl9zdHlsZSIsInVwZGF0ZWRTdHlsZSIsImtleSIsInZhbHVlIiwiX19pc05hdGl2ZSIsIl9fZ2V0VmFsdWUiLCJBcnJheSIsImlzQXJyYXkiLCJfd2Fsa1N0eWxlQW5kR2V0VmFsdWVzIiwiX19nZXRBbmltYXRlZFZhbHVlIiwiX3dhbGtTdHlsZUFuZEdldEFuaW1hdGVkVmFsdWVzIiwiX19hZGRDaGlsZCIsIl9fcmVtb3ZlQ2hpbGQiLCJfX21ha2VOYXRpdmUiLCJzdHlsZUNvbmZpZyIsInN0eWxlS2V5IiwiX19nZXROYXRpdmVUYWciLCJ2YWxpZGF0ZVN0eWxlcyIsInR5cGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiO0FBU0E7Ozs7Ozs7Ozs7Ozs7O0FBRUEsSUFBTUEsZUFBZUMsUUFBUSxnQkFBUixDQUFyQjtBQUNBLElBQU1DLG9CQUFvQkQsUUFBUSxxQkFBUixDQUExQjtBQUNBLElBQU1FLHVCQUF1QkYsUUFBUSx3QkFBUixDQUE3QjtBQUNBLElBQU1HLHVCQUF1QkgsUUFBUSx5QkFBUixDQUE3Qjs7QUFFQSxJQUFNSSxlQUFlSixRQUFRLGNBQVIsQ0FBckI7O0lBRU1LLGE7OztBQUdKLHlCQUFZQyxLQUFaLEVBQXdCO0FBQUE7O0FBQUE7O0FBRXRCQSxZQUFRRixhQUFhRSxLQUFiLEtBQXVCLEVBQS9CO0FBQ0EsUUFBSUEsTUFBTUMsU0FBVixFQUFxQjtBQUNuQkQsMkJBQ0tBLEtBREw7QUFFRUMsbUJBQVcsSUFBSU4saUJBQUosQ0FBc0JLLE1BQU1DLFNBQTVCO0FBRmI7QUFJRDtBQUNELFVBQUtDLE1BQUwsR0FBY0YsS0FB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eUIsT0FBT0MsT0FBUCxHQUFpQnZCLGFBQWpCIiwiZmlsZSI6IkFuaW1hdGVkU3R5bGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKiBAZm9ybWF0XG4gKi9cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgQW5pbWF0ZWROb2RlID0gcmVxdWlyZSgnLi9BbmltYXRlZE5vZGUnKTtcbmNvbnN0IEFuaW1hdGVkVHJhbnNmb3JtID0gcmVxdWlyZSgnLi9BbmltYXRlZFRyYW5zZm9ybScpO1xuY29uc3QgQW5pbWF0ZWRXaXRoQ2hpbGRyZW4gPSByZXF1aXJlKCcuL0FuaW1hdGVkV2l0aENoaWxkcmVuJyk7XG5jb25zdCBOYXRpdmVBbmltYXRlZEhlbHBlciA9IHJlcXVpcmUoJy4uL05hdGl2ZUFuaW1hdGVkSGVscGVyJyk7XG5cbmNvbnN0IGZsYXR0ZW5TdHlsZSA9IHJlcXVpcmUoJ2ZsYXR0ZW5TdHlsZScpO1xuXG5jbGFzcyBBbmltYXRlZFN0eWxlIGV4dGVuZHMgQW5pbWF0ZWRXaXRoQ2hpbGRyZW4ge1xuICBfc3R5bGU6IE9iamVjdDtcblxuICBjb25zdHJ1Y3RvcihzdHlsZTogYW55KSB7XG4gICAgc3VwZXIoKTtcbiAgICBzdHlsZSA9IGZsYXR0ZW5TdHlsZShzdHlsZSkgfHwge307XG4gICAgaWYgKHN0eWxlLnRyYW5zZm9ybSkge1xuICAgICAgc3R5bGUgPSB7XG4gICAgICAgIC4uLnN0eWxlLFxuICAgICAgICB0cmFuc2Zvcm06IG5ldyBBbmltYXRlZFRyYW5zZm9ybShzdHlsZS50cmFuc2Zvcm0pLFxuICAgICAgfTtcbiAgICB9XG4gICAgdGhpcy5fc3R5bGUgPSBzdHlsZTtcbiAgfVxuXG4gIC8vIFJlY3Vyc2l2ZWx5IGdldCB2YWx1ZXMgZm9yIG5lc3RlZCBzdHlsZXMgKGxpa2UgaU9TJ3Mgc2hhZG93T2Zmc2V0KVxuICBfd2Fsa1N0eWxlQW5kR2V0VmFsdWVzKHN0eWxlKSB7XG4gICAgY29uc3QgdXBkYXRlZFN0eWxlID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgaW4gc3R5bGUpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gc3R5bGVba2V5XTtcbiAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFuaW1hdGVkTm9kZSkge1xuICAgICAgICBpZiAoIXZhbHVlLl9faXNOYXRpdmUpIHtcbiAgICAgICAgICAvLyBXZSBjYW5ub3QgdXNlIHZhbHVlIG9mIG5hdGl2ZWx5IGRyaXZlbiBub2RlcyB0aGlzIHdheSBhcyB0aGUgdmFsdWUgd2UgaGF2ZSBhY2Nlc3MgZnJvbVxuICAgICAgICAgIC8vIEpTIG1heSBub3QgYmUgdXAgdG8gZGF0ZS5cbiAgICAgICAgICB1cGRhdGVkU3R5bGVba2V5XSA9IHZhbHVlLl9fZ2V0VmFsdWUoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh2YWx1ZSAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICAvLyBTdXBwb3J0IGFuaW1hdGluZyBuZXN0ZWQgdmFsdWVzIChmb3IgZXhhbXBsZTogc2hhZG93T2Zmc2V0LmhlaWdodClcbiAgICAgICAgdXBkYXRlZFN0eWxlW2tleV0gPSB0aGlzLl93YWxrU3R5bGVBbmRHZXRWYWx1ZXModmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXBkYXRlZFN0eWxlW2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVwZGF0ZWRTdHlsZTtcbiAgfVxuXG4gIF9fZ2V0VmFsdWUoKTogT2JqZWN0IHtcbiAgICByZXR1cm4gdGhpcy5fd2Fsa1N0eWxlQW5kR2V0VmFsdWVzKHRoaXMuX3N0eWxlKTtcbiAgfVxuXG4gIC8vIFJlY3Vyc2l2ZWx5IGdldCBhbmltYXRlZCB2YWx1ZXMgZm9yIG5lc3RlZCBzdHlsZXMgKGxpa2UgaU9TJ3Mgc2hhZG93T2Zmc2V0KVxuICBfd2Fsa1N0eWxlQW5kR2V0QW5pbWF0ZWRWYWx1ZXMoc3R5bGUpIHtcbiAgICBjb25zdCB1cGRhdGVkU3R5bGUgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBzdHlsZSkge1xuICAgICAgY29uc3QgdmFsdWUgPSBzdHlsZVtrZXldO1xuICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQW5pbWF0ZWROb2RlKSB7XG4gICAgICAgIHVwZGF0ZWRTdHlsZVtrZXldID0gdmFsdWUuX19nZXRBbmltYXRlZFZhbHVlKCk7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIC8vIFN1cHBvcnQgYW5pbWF0aW5nIG5lc3RlZCB2YWx1ZXMgKGZvciBleGFtcGxlOiBzaGFkb3dPZmZzZXQuaGVpZ2h0KVxuICAgICAgICB1cGRhdGVkU3R5bGVba2V5XSA9IHRoaXMuX3dhbGtTdHlsZUFuZEdldEFuaW1hdGVkVmFsdWVzKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVwZGF0ZWRTdHlsZTtcbiAgfVxuXG4gIF9fZ2V0QW5pbWF0ZWRWYWx1ZSgpOiBPYmplY3Qge1xuICAgIHJldHVybiB0aGlzLl93YWxrU3R5bGVBbmRHZXRBbmltYXRlZFZhbHVlcyh0aGlzLl9zdHlsZSk7XG4gIH1cblxuICBfX2F0dGFjaCgpOiB2b2lkIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLl9zdHlsZSkge1xuICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLl9zdHlsZVtrZXldO1xuICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQW5pbWF0ZWROb2RlKSB7XG4gICAgICAgIHZhbHVlLl9fYWRkQ2hpbGQodGhpcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX19kZXRhY2goKTogdm9pZCB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5fc3R5bGUpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5fc3R5bGVba2V5XTtcbiAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFuaW1hdGVkTm9kZSkge1xuICAgICAgICB2YWx1ZS5fX3JlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgICBzdXBlci5fX2RldGFjaCgpO1xuICB9XG5cbiAgX19tYWtlTmF0aXZlKCkge1xuICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuX3N0eWxlKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuX3N0eWxlW2tleV07XG4gICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBBbmltYXRlZE5vZGUpIHtcbiAgICAgICAgdmFsdWUuX19tYWtlTmF0aXZlKCk7XG4gICAgICB9XG4gICAgfVxuICAgIHN1cGVyLl9fbWFrZU5hdGl2ZSgpO1xuICB9XG5cbiAgX19nZXROYXRpdmVDb25maWcoKTogT2JqZWN0IHtcbiAgICBjb25zdCBzdHlsZUNvbmZpZyA9IHt9O1xuICAgIGZvciAoY29uc3Qgc3R5bGVLZXkgaW4gdGhpcy5fc3R5bGUpIHtcbiAgICAgIGlmICh0aGlzLl9zdHlsZVtzdHlsZUtleV0gaW5zdGFuY2VvZiBBbmltYXRlZE5vZGUpIHtcbiAgICAgICAgc3R5bGVDb25maWdbc3R5bGVLZXldID0gdGhpcy5fc3R5bGVbc3R5bGVLZXldLl9fZ2V0TmF0aXZlVGFnKCk7XG4gICAgICB9XG4gICAgICAvLyBOb24tYW5pbWF0ZWQgc3R5bGVzIGFyZSBzZXQgdXNpbmcgYHNldE5hdGl2ZVByb3BzYCwgbm8gbmVlZFxuICAgICAgLy8gdG8gcGFzcyB0aG9zZSBhcyBhIHBhcnQgb2YgdGhlIG5vZGUgY29uZmlnXG4gICAgfVxuICAgIE5hdGl2ZUFuaW1hdGVkSGVscGVyLnZhbGlkYXRlU3R5bGVzKHN0eWxlQ29uZmlnKTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ3N0eWxlJyxcbiAgICAgIHN0eWxlOiBzdHlsZUNvbmZpZyxcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQW5pbWF0ZWRTdHlsZTtcbiJdfQ==