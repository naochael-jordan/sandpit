937ac9ab61d33d58ae0d26e175f1f95f


'use strict';

function stiffnessFromOrigamiValue(oValue) {
  return (oValue - 30) * 3.62 + 194;
}

function dampingFromOrigamiValue(oValue) {
  return (oValue - 8) * 3 + 25;
}

function fromOrigamiTensionAndFriction(tension, friction) {
  return {
    stiffness: stiffnessFromOrigamiValue(tension),
    damping: dampingFromOrigamiValue(friction)
  };
}

function fromBouncinessAndSpeed(bounciness, speed) {
  function normalize(value, startValue, endValue) {
    return (value - startValue) / (endValue - startValue);
  }

  function projectNormal(n, start, end) {
    return start + n * (end - start);
  }

  function linearInterpolation(t, start, end) {
    return t * end + (1 - t) * start;
  }

  function quadraticOutInterpolation(t, start, end) {
    return linearInterpolation(2 * t - t * t, start, end);
  }

  function b3Friction1(x) {
    return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;
  }

  function b3Friction2(x) {
    return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2;
  }

  function b3Friction3(x) {
    return 0.00000045 * Math.pow(x, 3) - 0.000332 * Math.pow(x, 2) + 0.1078 * x + 5.84;
  }

  function b3Nobounce(tension) {
    if (tension <= 18) {
      return b3Friction1(tension);
    } else if (tension > 18 && tension <= 44) {
      return b3Friction2(tension);
    } else {
      return b3Friction3(tension);
    }
  }

  var b = normalize(bounciness / 1.7, 0, 20);
  b = projectNormal(b, 0, 0.8);
  var s = normalize(speed / 1.7, 0, 20);
  var bouncyTension = projectNormal(s, 0.5, 200);
  var bouncyFriction = quadraticOutInterpolation(b, b3Nobounce(bouncyTension), 0.01);

  return {
    stiffness: stiffnessFromOrigamiValue(bouncyTension),
    damping: dampingFromOrigamiValue(bouncyFriction)
  };
}

module.exports = {
  fromOrigamiTensionAndFriction: fromOrigamiTensionAndFriction,
  fromBouncinessAndSpeed: fromBouncinessAndSpeed
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNwcmluZ0NvbmZpZy5qcyJdLCJuYW1lcyI6WyJzdGlmZm5lc3NGcm9tT3JpZ2FtaVZhbHVlIiwib1ZhbHVlIiwiZGFtcGluZ0Zyb21PcmlnYW1pVmFsdWUiLCJmcm9tT3JpZ2FtaVRlbnNpb25BbmRGcmljdGlvbiIsInRlbnNpb24iLCJmcmljdGlvbiIsInN0aWZmbmVzcyIsImRhbXBpbmciLCJmcm9tQm91bmNpbmVzc0FuZFNwZWVkIiwiYm91bmNpbmVzcyIsInNwZWVkIiwibm9ybWFsaXplIiwidmFsdWUiLCJzdGFydFZhbHVlIiwiZW5kVmFsdWUiLCJwcm9qZWN0Tm9ybWFsIiwibiIsInN0YXJ0IiwiZW5kIiwibGluZWFySW50ZXJwb2xhdGlvbiIsInQiLCJxdWFkcmF0aWNPdXRJbnRlcnBvbGF0aW9uIiwiYjNGcmljdGlvbjEiLCJ4IiwiTWF0aCIsInBvdyIsImIzRnJpY3Rpb24yIiwiYjNGcmljdGlvbjMiLCJiM05vYm91bmNlIiwiYiIsInMiLCJib3VuY3lUZW5zaW9uIiwiYm91bmN5RnJpY3Rpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQVVBOztBQU9BLFNBQVNBLHlCQUFULENBQW1DQyxNQUFuQyxFQUEyQztBQUN6QyxTQUFPLENBQUNBLFNBQVMsRUFBVixJQUFnQixJQUFoQixHQUF1QixHQUE5QjtBQUNEOztBQUVELFNBQVNDLHVCQUFULENBQWlDRCxNQUFqQyxFQUF5QztBQUN2QyxTQUFPLENBQUNBLFNBQVMsQ0FBVixJQUFlLENBQWYsR0FBbUIsRUFBMUI7QUFDRDs7QUFFRCxTQUFTRSw2QkFBVCxDQUNFQyxPQURGLEVBRUVDLFFBRkYsRUFHb0I7QUFDbEIsU0FBTztBQUNMQyxlQUFXTiwwQkFBMEJJLE9BQTFCLENBRE47QUFFTEcsYUFBU0wsd0JBQXdCRyxRQUF4QjtBQUZKLEdBQVA7QUFJRDs7QUFFRCxTQUFTRyxzQkFBVCxDQUNFQyxVQURGLEVBRUVDLEtBRkYsRUFHb0I7QUFDbEIsV0FBU0MsU0FBVCxDQUFtQkMsS0FBbkIsRUFBMEJDLFVBQTFCLEVBQXNDQyxRQUF0QyxFQUFnRDtBQUM5QyxXQUFPLENBQUNGLFFBQVFDLFVBQVQsS0FBd0JDLFdBQVdELFVBQW5DLENBQVA7QUFDRDs7QUFFRCxXQUFTRSxhQUFULENBQXVCQyxDQUF2QixFQUEwQkMsS0FBMUIsRUFBaUNDLEdBQWpDLEVBQXNDO0FBQ3BDLFdBQU9ELFFBQVFELEtBQUtFLE1BQU1ELEtBQVgsQ0FBZjtBQUNEOztBQUVELFdBQVNFLG1CQUFULENBQTZCQyxDQUE3QixFQUFnQ0gsS0FBaEMsRUFBdUNDLEdBQXZDLEVBQTRDO0FBQzFDLFdBQU9FLElBQUlGLEdBQUosR0FBVSxDQUFDLElBQUlFLENBQUwsSUFBVUgsS0FBM0I7QUFDRDs7QUFFRCxXQUFTSSx5QkFBVCxDQUFtQ0QsQ0FBbkMsRUFBc0NILEtBQXRDLEVBQTZDQyxHQUE3QyxFQUFrRDtBQUNoRCxXQUFPQyxvQkFBb0IsSUFBSUMsQ0FBSixHQUFRQSxJQUFJQSxDQUFoQyxFQUFtQ0gsS0FBbkMsRUFBMENDLEdBQTFDLENBQVA7QUFDRDs7QUFFRCxXQUFTSSxXQUFULENBQXFCQyxDQUFyQixFQUF3QjtBQUN0QixXQUFPLFNBQVNDLEtBQUtDLEdBQUwsQ0FBU0YsQ0FBVCxFQUFZLENBQVosQ0FBVCxHQUEwQixRQUFRQyxLQUFLQyxHQUFMLENBQVNGLENBQVQsRUFBWSxDQUFaLENBQWxDLEdBQW1ELE9BQU9BLENBQTFELEdBQThELElBQXJFO0FBQ0Q7O0FBRUQsV0FBU0csV0FBVCxDQUFxQkgsQ0FBckIsRUFBd0I7QUFDdEIsV0FBTyxXQUFXQyxLQUFLQyxHQUFMLENBQVNGLENBQVQsRUFBWSxDQUFaLENBQVgsR0FBNEIsUUFBUUMsS0FBS0MsR0FBTCxDQUFTRixDQUFULEVBQVksQ0FBWixDQUFwQyxHQUFxRCxPQUFPQSxDQUE1RCxHQUFnRSxDQUF2RTtBQUNEOztBQUVELFdBQVNJLFdBQVQsQ0FBcUJKLENBQXJCLEVBQXdCO0FBQ3RCLFdBQ0UsYUFBYUMsS0FBS0MsR0FBTCxDQUFTRixDQUFULEVBQVksQ0FBWixDQUFiLEdBQ0EsV0FBV0MsS0FBS0MsR0FBTCxDQUFTRixDQUFULEVBQVksQ0FBWixDQURYLEdBRUEsU0FBU0EsQ0FGVCxHQUdBLElBSkY7QUFNRDs7QUFFRCxXQUFTSyxVQUFULENBQW9CeEIsT0FBcEIsRUFBNkI7QUFDM0IsUUFBSUEsV0FBVyxFQUFmLEVBQW1CO0FBQ2pCLGFBQU9rQixZQUFZbEIsT0FBWixDQUFQO0FBQ0QsS0FGRCxNQUVPLElBQUlBLFVBQVUsRUFBVixJQUFnQkEsV0FBVyxFQUEvQixFQUFtQztBQUN4QyxhQUFPc0IsWUFBWXRCLE9BQVosQ0FBUDtBQUNELEtBRk0sTUFFQTtBQUNMLGFBQU91QixZQUFZdkIsT0FBWixDQUFQO0FBQ0Q7QUFDRjs7QUFFRCxNQUFJeUIsSUFBSWxCLFVBQVVGLGFBQWEsR0FBdkIsRUFBNEIsQ0FBNUIsRUFBK0IsRUFBL0IsQ0FBUjtBQUNBb0IsTUFBSWQsY0FBY2MsQ0FBZCxFQUFpQixDQUFqQixFQUFvQixHQUFwQixDQUFKO0FBQ0EsTUFBTUMsSUFBSW5CLFVBQVVELFFBQVEsR0FBbEIsRUFBdUIsQ0FBdkIsRUFBMEIsRUFBMUIsQ0FBVjtBQUNBLE1BQU1xQixnQkFBZ0JoQixjQUFjZSxDQUFkLEVBQWlCLEdBQWpCLEVBQXNCLEdBQXRCLENBQXRCO0FBQ0EsTUFBTUUsaUJBQWlCWCwwQkFDckJRLENBRHFCLEVBRXJCRCxXQUFXRyxhQUFYLENBRnFCLEVBR3JCLElBSHFCLENBQXZCOztBQU1BLFNBQU87QUFDTHpCLGVBQVdOLDBCQUEwQitCLGFBQTFCLENBRE47QUFFTHhCLGFBQVNMLHdCQUF3QjhCLGNBQXhCO0FBRkosR0FBUDtBQUlEOztBQUVEQyxPQUFPQyxPQUFQLEdBQWlCO0FBQ2YvQiw4REFEZTtBQUVmSztBQUZlLENBQWpCIiwiZmlsZSI6IlNwcmluZ0NvbmZpZy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3cgc3RyaWN0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG50eXBlIFNwcmluZ0NvbmZpZ1R5cGUgPSB7XG4gIHN0aWZmbmVzczogbnVtYmVyLFxuICBkYW1waW5nOiBudW1iZXIsXG59O1xuXG5mdW5jdGlvbiBzdGlmZm5lc3NGcm9tT3JpZ2FtaVZhbHVlKG9WYWx1ZSkge1xuICByZXR1cm4gKG9WYWx1ZSAtIDMwKSAqIDMuNjIgKyAxOTQ7XG59XG5cbmZ1bmN0aW9uIGRhbXBpbmdGcm9tT3JpZ2FtaVZhbHVlKG9WYWx1ZSkge1xuICByZXR1cm4gKG9WYWx1ZSAtIDgpICogMyArIDI1O1xufVxuXG5mdW5jdGlvbiBmcm9tT3JpZ2FtaVRlbnNpb25BbmRGcmljdGlvbihcbiAgdGVuc2lvbjogbnVtYmVyLFxuICBmcmljdGlvbjogbnVtYmVyLFxuKTogU3ByaW5nQ29uZmlnVHlwZSB7XG4gIHJldHVybiB7XG4gICAgc3RpZmZuZXNzOiBzdGlmZm5lc3NGcm9tT3JpZ2FtaVZhbHVlKHRlbnNpb24pLFxuICAgIGRhbXBpbmc6IGRhbXBpbmdGcm9tT3JpZ2FtaVZhbHVlKGZyaWN0aW9uKSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gZnJvbUJvdW5jaW5lc3NBbmRTcGVlZChcbiAgYm91bmNpbmVzczogbnVtYmVyLFxuICBzcGVlZDogbnVtYmVyLFxuKTogU3ByaW5nQ29uZmlnVHlwZSB7XG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZSh2YWx1ZSwgc3RhcnRWYWx1ZSwgZW5kVmFsdWUpIHtcbiAgICByZXR1cm4gKHZhbHVlIC0gc3RhcnRWYWx1ZSkgLyAoZW5kVmFsdWUgLSBzdGFydFZhbHVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb2plY3ROb3JtYWwobiwgc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBzdGFydCArIG4gKiAoZW5kIC0gc3RhcnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGluZWFySW50ZXJwb2xhdGlvbih0LCBzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIHQgKiBlbmQgKyAoMSAtIHQpICogc3RhcnQ7XG4gIH1cblxuICBmdW5jdGlvbiBxdWFkcmF0aWNPdXRJbnRlcnBvbGF0aW9uKHQsIHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gbGluZWFySW50ZXJwb2xhdGlvbigyICogdCAtIHQgKiB0LCBzdGFydCwgZW5kKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGIzRnJpY3Rpb24xKHgpIHtcbiAgICByZXR1cm4gMC4wMDA3ICogTWF0aC5wb3coeCwgMykgLSAwLjAzMSAqIE1hdGgucG93KHgsIDIpICsgMC42NCAqIHggKyAxLjI4O1xuICB9XG5cbiAgZnVuY3Rpb24gYjNGcmljdGlvbjIoeCkge1xuICAgIHJldHVybiAwLjAwMDA0NCAqIE1hdGgucG93KHgsIDMpIC0gMC4wMDYgKiBNYXRoLnBvdyh4LCAyKSArIDAuMzYgKiB4ICsgMjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGIzRnJpY3Rpb24zKHgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgMC4wMDAwMDA0NSAqIE1hdGgucG93KHgsIDMpIC1cbiAgICAgIDAuMDAwMzMyICogTWF0aC5wb3coeCwgMikgK1xuICAgICAgMC4xMDc4ICogeCArXG4gICAgICA1Ljg0XG4gICAgKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGIzTm9ib3VuY2UodGVuc2lvbikge1xuICAgIGlmICh0ZW5zaW9uIDw9IDE4KSB7XG4gICAgICByZXR1cm4gYjNGcmljdGlvbjEodGVuc2lvbik7XG4gICAgfSBlbHNlIGlmICh0ZW5zaW9uID4gMTggJiYgdGVuc2lvbiA8PSA0NCkge1xuICAgICAgcmV0dXJuIGIzRnJpY3Rpb24yKHRlbnNpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYjNGcmljdGlvbjModGVuc2lvbik7XG4gICAgfVxuICB9XG5cbiAgbGV0IGIgPSBub3JtYWxpemUoYm91bmNpbmVzcyAvIDEuNywgMCwgMjApO1xuICBiID0gcHJvamVjdE5vcm1hbChiLCAwLCAwLjgpO1xuICBjb25zdCBzID0gbm9ybWFsaXplKHNwZWVkIC8gMS43LCAwLCAyMCk7XG4gIGNvbnN0IGJvdW5jeVRlbnNpb24gPSBwcm9qZWN0Tm9ybWFsKHMsIDAuNSwgMjAwKTtcbiAgY29uc3QgYm91bmN5RnJpY3Rpb24gPSBxdWFkcmF0aWNPdXRJbnRlcnBvbGF0aW9uKFxuICAgIGIsXG4gICAgYjNOb2JvdW5jZShib3VuY3lUZW5zaW9uKSxcbiAgICAwLjAxLFxuICApO1xuXG4gIHJldHVybiB7XG4gICAgc3RpZmZuZXNzOiBzdGlmZm5lc3NGcm9tT3JpZ2FtaVZhbHVlKGJvdW5jeVRlbnNpb24pLFxuICAgIGRhbXBpbmc6IGRhbXBpbmdGcm9tT3JpZ2FtaVZhbHVlKGJvdW5jeUZyaWN0aW9uKSxcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGZyb21PcmlnYW1pVGVuc2lvbkFuZEZyaWN0aW9uLFxuICBmcm9tQm91bmNpbmVzc0FuZFNwZWVkLFxufTtcbiJdfQ==