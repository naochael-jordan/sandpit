8277a8c8121315631399fdd55c72620c


'use strict';

var AssetRegistry = require('AssetRegistry');
var AssetSourceResolver = require('AssetSourceResolver');

var _customSourceTransformer = void 0,
    _serverURL = void 0,
    _scriptURL = void 0;

var _sourceCodeScriptURL = void 0;
function getSourceCodeScriptURL() {
  if (_sourceCodeScriptURL) {
    return _sourceCodeScriptURL;
  }

  var sourceCode = global.nativeExtensions && global.nativeExtensions.SourceCode;
  if (!sourceCode) {
    var NativeModules = require('NativeModules');
    sourceCode = NativeModules && NativeModules.SourceCode;
  }
  _sourceCodeScriptURL = sourceCode.scriptURL;
  return _sourceCodeScriptURL;
}

function getDevServerURL() {
  if (_serverURL === undefined) {
    var sourceCodeScriptURL = getSourceCodeScriptURL();
    var match = sourceCodeScriptURL && sourceCodeScriptURL.match(/^https?:\/\/.*?\//);
    if (match) {
      _serverURL = match[0];
    } else {
      _serverURL = null;
    }
  }
  return _serverURL;
}

function _coerceLocalScriptURL(scriptURL) {
  if (scriptURL) {
    if (scriptURL.startsWith('assets://')) {
      return null;
    }
    scriptURL = scriptURL.substring(0, scriptURL.lastIndexOf('/') + 1);
    if (!scriptURL.includes('://')) {
      scriptURL = 'file://' + scriptURL;
    }
  }
  return scriptURL;
}

function getScriptURL() {
  if (_scriptURL === undefined) {
    _scriptURL = _coerceLocalScriptURL(getSourceCodeScriptURL());
  }
  return _scriptURL;
}

function setCustomSourceTransformer(transformer) {
  _customSourceTransformer = transformer;
}

function resolveAssetSource(source) {
  if (typeof source === 'object') {
    return source;
  }

  var asset = AssetRegistry.getAssetByID(source);
  if (!asset) {
    return null;
  }

  var resolver = new AssetSourceResolver(getDevServerURL(), getScriptURL(), asset);
  if (_customSourceTransformer) {
    return _customSourceTransformer(resolver);
  }
  return resolver.defaultAsset();
}

module.exports = resolveAssetSource;
module.exports.pickScale = AssetSourceResolver.pickScale;
module.exports.setCustomSourceTransformer = setCustomSourceTransformer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlc29sdmVBc3NldFNvdXJjZS5qcyJdLCJuYW1lcyI6WyJBc3NldFJlZ2lzdHJ5IiwicmVxdWlyZSIsIkFzc2V0U291cmNlUmVzb2x2ZXIiLCJfY3VzdG9tU291cmNlVHJhbnNmb3JtZXIiLCJfc2VydmVyVVJMIiwiX3NjcmlwdFVSTCIsIl9zb3VyY2VDb2RlU2NyaXB0VVJMIiwiZ2V0U291cmNlQ29kZVNjcmlwdFVSTCIsInNvdXJjZUNvZGUiLCJnbG9iYWwiLCJuYXRpdmVFeHRlbnNpb25zIiwiU291cmNlQ29kZSIsIk5hdGl2ZU1vZHVsZXMiLCJzY3JpcHRVUkwiLCJnZXREZXZTZXJ2ZXJVUkwiLCJ1bmRlZmluZWQiLCJzb3VyY2VDb2RlU2NyaXB0VVJMIiwibWF0Y2giLCJfY29lcmNlTG9jYWxTY3JpcHRVUkwiLCJzdGFydHNXaXRoIiwic3Vic3RyaW5nIiwibGFzdEluZGV4T2YiLCJpbmNsdWRlcyIsImdldFNjcmlwdFVSTCIsInNldEN1c3RvbVNvdXJjZVRyYW5zZm9ybWVyIiwidHJhbnNmb3JtZXIiLCJyZXNvbHZlQXNzZXRTb3VyY2UiLCJzb3VyY2UiLCJhc3NldCIsImdldEFzc2V0QnlJRCIsInJlc29sdmVyIiwiZGVmYXVsdEFzc2V0IiwibW9kdWxlIiwiZXhwb3J0cyIsInBpY2tTY2FsZSJdLCJtYXBwaW5ncyI6Ijs7QUFhQTs7QUFFQSxJQUFNQSxnQkFBZ0JDLFFBQVEsZUFBUixDQUF0QjtBQUNBLElBQU1DLHNCQUFzQkQsUUFBUSxxQkFBUixDQUE1Qjs7QUFJQSxJQUFJRSxpQ0FBSjtBQUFBLElBQThCQyxtQkFBOUI7QUFBQSxJQUEwQ0MsbUJBQTFDOztBQUVBLElBQUlDLDZCQUFKO0FBQ0EsU0FBU0Msc0JBQVQsR0FBMkM7QUFDekMsTUFBSUQsb0JBQUosRUFBMEI7QUFDeEIsV0FBT0Esb0JBQVA7QUFDRDs7QUFFRCxNQUFJRSxhQUNGQyxPQUFPQyxnQkFBUCxJQUEyQkQsT0FBT0MsZ0JBQVAsQ0FBd0JDLFVBRHJEO0FBRUEsTUFBSSxDQUFDSCxVQUFMLEVBQWlCO0FBQ2YsUUFBTUksZ0JBQWdCWCxRQUFRLGVBQVIsQ0FBdEI7QUFDQU8saUJBQWFJLGlCQUFpQkEsY0FBY0QsVUFBNUM7QUFDRDtBQUNETCx5QkFBdUJFLFdBQVdLLFNBQWxDO0FBQ0EsU0FBT1Asb0JBQVA7QUFDRDs7QUFFRCxTQUFTUSxlQUFULEdBQW9DO0FBQ2xDLE1BQUlWLGVBQWVXLFNBQW5CLEVBQThCO0FBQzVCLFFBQU1DLHNCQUFzQlQsd0JBQTVCO0FBQ0EsUUFBTVUsUUFDSkQsdUJBQXVCQSxvQkFBb0JDLEtBQXBCLENBQTBCLG1CQUExQixDQUR6QjtBQUVBLFFBQUlBLEtBQUosRUFBVztBQUVUYixtQkFBYWEsTUFBTSxDQUFOLENBQWI7QUFDRCxLQUhELE1BR087QUFFTGIsbUJBQWEsSUFBYjtBQUNEO0FBQ0Y7QUFDRCxTQUFPQSxVQUFQO0FBQ0Q7O0FBRUQsU0FBU2MscUJBQVQsQ0FBK0JMLFNBQS9CLEVBQTREO0FBQzFELE1BQUlBLFNBQUosRUFBZTtBQUNiLFFBQUlBLFVBQVVNLFVBQVYsQ0FBcUIsV0FBckIsQ0FBSixFQUF1QztBQUVyQyxhQUFPLElBQVA7QUFDRDtBQUNETixnQkFBWUEsVUFBVU8sU0FBVixDQUFvQixDQUFwQixFQUF1QlAsVUFBVVEsV0FBVixDQUFzQixHQUF0QixJQUE2QixDQUFwRCxDQUFaO0FBQ0EsUUFBSSxDQUFDUixVQUFVUyxRQUFWLENBQW1CLEtBQW5CLENBQUwsRUFBZ0M7QUFHOUJULGtCQUFZLFlBQVlBLFNBQXhCO0FBQ0Q7QUFDRjtBQUNELFNBQU9BLFNBQVA7QUFDRDs7QUFFRCxTQUFTVSxZQUFULEdBQWlDO0FBQy9CLE1BQUlsQixlQUFlVSxTQUFuQixFQUE4QjtBQUM1QlYsaUJBQWFhLHNCQUFzQlgsd0JBQXRCLENBQWI7QUFDRDtBQUNELFNBQU9GLFVBQVA7QUFDRDs7QUFFRCxTQUFTbUIsMEJBQVQsQ0FDRUMsV0FERixFQUVRO0FBQ050Qiw2QkFBMkJzQixXQUEzQjtBQUNEOztBQU1ELFNBQVNDLGtCQUFULENBQTRCQyxNQUE1QixFQUErRDtBQUM3RCxNQUFJLE9BQU9BLE1BQVAsS0FBa0IsUUFBdEIsRUFBZ0M7QUFDOUIsV0FBT0EsTUFBUDtBQUNEOztBQUVELE1BQU1DLFFBQVE1QixjQUFjNkIsWUFBZCxDQUEyQkYsTUFBM0IsQ0FBZDtBQUNBLE1BQUksQ0FBQ0MsS0FBTCxFQUFZO0FBQ1YsV0FBTyxJQUFQO0FBQ0Q7O0FBRUQsTUFBTUUsV0FBVyxJQUFJNUIsbUJBQUosQ0FDZlksaUJBRGUsRUFFZlMsY0FGZSxFQUdmSyxLQUhlLENBQWpCO0FBS0EsTUFBSXpCLHdCQUFKLEVBQThCO0FBQzVCLFdBQU9BLHlCQUF5QjJCLFFBQXpCLENBQVA7QUFDRDtBQUNELFNBQU9BLFNBQVNDLFlBQVQsRUFBUDtBQUNEOztBQUVEQyxPQUFPQyxPQUFQLEdBQWlCUCxrQkFBakI7QUFDQU0sT0FBT0MsT0FBUCxDQUFlQyxTQUFmLEdBQTJCaEMsb0JBQW9CZ0MsU0FBL0M7QUFDQUYsT0FBT0MsT0FBUCxDQUFlVCwwQkFBZixHQUE0Q0EsMEJBQTVDIiwiZmlsZSI6InJlc29sdmVBc3NldFNvdXJjZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICpcbiAqIFJlc29sdmVzIGFuIGFzc2V0IGludG8gYSBgc291cmNlYCBmb3IgYEltYWdlYC5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvd1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgQXNzZXRSZWdpc3RyeSA9IHJlcXVpcmUoJ0Fzc2V0UmVnaXN0cnknKTtcbmNvbnN0IEFzc2V0U291cmNlUmVzb2x2ZXIgPSByZXF1aXJlKCdBc3NldFNvdXJjZVJlc29sdmVyJyk7XG5cbmltcG9ydCB0eXBlIHtSZXNvbHZlZEFzc2V0U291cmNlfSBmcm9tICdBc3NldFNvdXJjZVJlc29sdmVyJztcblxubGV0IF9jdXN0b21Tb3VyY2VUcmFuc2Zvcm1lciwgX3NlcnZlclVSTCwgX3NjcmlwdFVSTDtcblxubGV0IF9zb3VyY2VDb2RlU2NyaXB0VVJMOiA/c3RyaW5nO1xuZnVuY3Rpb24gZ2V0U291cmNlQ29kZVNjcmlwdFVSTCgpOiA/c3RyaW5nIHtcbiAgaWYgKF9zb3VyY2VDb2RlU2NyaXB0VVJMKSB7XG4gICAgcmV0dXJuIF9zb3VyY2VDb2RlU2NyaXB0VVJMO1xuICB9XG5cbiAgbGV0IHNvdXJjZUNvZGUgPVxuICAgIGdsb2JhbC5uYXRpdmVFeHRlbnNpb25zICYmIGdsb2JhbC5uYXRpdmVFeHRlbnNpb25zLlNvdXJjZUNvZGU7XG4gIGlmICghc291cmNlQ29kZSkge1xuICAgIGNvbnN0IE5hdGl2ZU1vZHVsZXMgPSByZXF1aXJlKCdOYXRpdmVNb2R1bGVzJyk7XG4gICAgc291cmNlQ29kZSA9IE5hdGl2ZU1vZHVsZXMgJiYgTmF0aXZlTW9kdWxlcy5Tb3VyY2VDb2RlO1xuICB9XG4gIF9zb3VyY2VDb2RlU2NyaXB0VVJMID0gc291cmNlQ29kZS5zY3JpcHRVUkw7XG4gIHJldHVybiBfc291cmNlQ29kZVNjcmlwdFVSTDtcbn1cblxuZnVuY3Rpb24gZ2V0RGV2U2VydmVyVVJMKCk6ID9zdHJpbmcge1xuICBpZiAoX3NlcnZlclVSTCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY29uc3Qgc291cmNlQ29kZVNjcmlwdFVSTCA9IGdldFNvdXJjZUNvZGVTY3JpcHRVUkwoKTtcbiAgICBjb25zdCBtYXRjaCA9XG4gICAgICBzb3VyY2VDb2RlU2NyaXB0VVJMICYmIHNvdXJjZUNvZGVTY3JpcHRVUkwubWF0Y2goL15odHRwcz86XFwvXFwvLio/XFwvLyk7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICAvLyBqc0J1bmRsZSB3YXMgbG9hZGVkIGZyb20gbmV0d29ya1xuICAgICAgX3NlcnZlclVSTCA9IG1hdGNoWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBqc0J1bmRsZSB3YXMgbG9hZGVkIGZyb20gZmlsZVxuICAgICAgX3NlcnZlclVSTCA9IG51bGw7XG4gICAgfVxuICB9XG4gIHJldHVybiBfc2VydmVyVVJMO1xufVxuXG5mdW5jdGlvbiBfY29lcmNlTG9jYWxTY3JpcHRVUkwoc2NyaXB0VVJMOiA/c3RyaW5nKTogP3N0cmluZyB7XG4gIGlmIChzY3JpcHRVUkwpIHtcbiAgICBpZiAoc2NyaXB0VVJMLnN0YXJ0c1dpdGgoJ2Fzc2V0czovLycpKSB7XG4gICAgICAvLyBhbmRyb2lkOiBydW5uaW5nIGZyb20gd2l0aGluIGFzc2V0cywgbm8gb2ZmbGluZSBwYXRoIHRvIHVzZVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHNjcmlwdFVSTCA9IHNjcmlwdFVSTC5zdWJzdHJpbmcoMCwgc2NyaXB0VVJMLmxhc3RJbmRleE9mKCcvJykgKyAxKTtcbiAgICBpZiAoIXNjcmlwdFVSTC5pbmNsdWRlcygnOi8vJykpIHtcbiAgICAgIC8vIEFkZCBmaWxlIHByb3RvY29sIGluIGNhc2Ugd2UgaGF2ZSBhbiBhYnNvbHV0ZSBmaWxlIHBhdGggYW5kIG5vdCBhIFVSTC5cbiAgICAgIC8vIFRoaXMgc2hvdWxkbid0IHJlYWxseSBiZSBuZWNlc3NhcnkuIHNjcmlwdFVSTCBzaG91bGQgYmUgYSBVUkwuXG4gICAgICBzY3JpcHRVUkwgPSAnZmlsZTovLycgKyBzY3JpcHRVUkw7XG4gICAgfVxuICB9XG4gIHJldHVybiBzY3JpcHRVUkw7XG59XG5cbmZ1bmN0aW9uIGdldFNjcmlwdFVSTCgpOiA/c3RyaW5nIHtcbiAgaWYgKF9zY3JpcHRVUkwgPT09IHVuZGVmaW5lZCkge1xuICAgIF9zY3JpcHRVUkwgPSBfY29lcmNlTG9jYWxTY3JpcHRVUkwoZ2V0U291cmNlQ29kZVNjcmlwdFVSTCgpKTtcbiAgfVxuICByZXR1cm4gX3NjcmlwdFVSTDtcbn1cblxuZnVuY3Rpb24gc2V0Q3VzdG9tU291cmNlVHJhbnNmb3JtZXIoXG4gIHRyYW5zZm9ybWVyOiAocmVzb2x2ZXI6IEFzc2V0U291cmNlUmVzb2x2ZXIpID0+IFJlc29sdmVkQXNzZXRTb3VyY2UsXG4pOiB2b2lkIHtcbiAgX2N1c3RvbVNvdXJjZVRyYW5zZm9ybWVyID0gdHJhbnNmb3JtZXI7XG59XG5cbi8qKlxuICogYHNvdXJjZWAgaXMgZWl0aGVyIGEgbnVtYmVyIChvcGFxdWUgdHlwZSByZXR1cm5lZCBieSByZXF1aXJlKCcuL2Zvby5wbmcnKSlcbiAqIG9yIGFuIGBJbWFnZVNvdXJjZWAgbGlrZSB7IHVyaTogJzxodHRwIGxvY2F0aW9uIHx8IGZpbGUgcGF0aD4nIH1cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZUFzc2V0U291cmNlKHNvdXJjZTogYW55KTogP1Jlc29sdmVkQXNzZXRTb3VyY2Uge1xuICBpZiAodHlwZW9mIHNvdXJjZSA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgY29uc3QgYXNzZXQgPSBBc3NldFJlZ2lzdHJ5LmdldEFzc2V0QnlJRChzb3VyY2UpO1xuICBpZiAoIWFzc2V0KSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCByZXNvbHZlciA9IG5ldyBBc3NldFNvdXJjZVJlc29sdmVyKFxuICAgIGdldERldlNlcnZlclVSTCgpLFxuICAgIGdldFNjcmlwdFVSTCgpLFxuICAgIGFzc2V0LFxuICApO1xuICBpZiAoX2N1c3RvbVNvdXJjZVRyYW5zZm9ybWVyKSB7XG4gICAgcmV0dXJuIF9jdXN0b21Tb3VyY2VUcmFuc2Zvcm1lcihyZXNvbHZlcik7XG4gIH1cbiAgcmV0dXJuIHJlc29sdmVyLmRlZmF1bHRBc3NldCgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlc29sdmVBc3NldFNvdXJjZTtcbm1vZHVsZS5leHBvcnRzLnBpY2tTY2FsZSA9IEFzc2V0U291cmNlUmVzb2x2ZXIucGlja1NjYWxlO1xubW9kdWxlLmV4cG9ydHMuc2V0Q3VzdG9tU291cmNlVHJhbnNmb3JtZXIgPSBzZXRDdXN0b21Tb3VyY2VUcmFuc2Zvcm1lcjtcbiJdfQ==