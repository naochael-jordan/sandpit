acfcbceb05e7386174e15b7eeb6243c8


'use strict';

var Platform = require('Platform');
var UIManager = require('UIManager');

var currentlyFocusedID = null;
var inputs = new Set();

function currentlyFocusedField() {
  return currentlyFocusedID;
}

function focusTextInput(textFieldID) {
  if (currentlyFocusedID !== textFieldID && textFieldID !== null) {
    currentlyFocusedID = textFieldID;
    if (Platform.OS === 'ios') {
      UIManager.focus(textFieldID);
    } else if (Platform.OS === 'android') {
      UIManager.dispatchViewManagerCommand(textFieldID, UIManager.AndroidTextInput.Commands.focusTextInput, null);
    }
  }
}

function blurTextInput(textFieldID) {
  if (currentlyFocusedID === textFieldID && textFieldID !== null) {
    currentlyFocusedID = null;
    if (Platform.OS === 'ios') {
      UIManager.blur(textFieldID);
    } else if (Platform.OS === 'android') {
      UIManager.dispatchViewManagerCommand(textFieldID, UIManager.AndroidTextInput.Commands.blurTextInput, null);
    }
  }
}

function registerInput(textFieldID) {
  inputs.add(textFieldID);
}

function unregisterInput(textFieldID) {
  inputs.delete(textFieldID);
}

function isTextInput(textFieldID) {
  return inputs.has(textFieldID);
}

module.exports = {
  currentlyFocusedField: currentlyFocusedField,
  focusTextInput: focusTextInput,
  blurTextInput: blurTextInput,
  registerInput: registerInput,
  unregisterInput: unregisterInput,
  isTextInput: isTextInput
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRleHRJbnB1dFN0YXRlLmpzIl0sIm5hbWVzIjpbIlBsYXRmb3JtIiwicmVxdWlyZSIsIlVJTWFuYWdlciIsImN1cnJlbnRseUZvY3VzZWRJRCIsImlucHV0cyIsIlNldCIsImN1cnJlbnRseUZvY3VzZWRGaWVsZCIsImZvY3VzVGV4dElucHV0IiwidGV4dEZpZWxkSUQiLCJPUyIsImZvY3VzIiwiZGlzcGF0Y2hWaWV3TWFuYWdlckNvbW1hbmQiLCJBbmRyb2lkVGV4dElucHV0IiwiQ29tbWFuZHMiLCJibHVyVGV4dElucHV0IiwiYmx1ciIsInJlZ2lzdGVySW5wdXQiLCJhZGQiLCJ1bnJlZ2lzdGVySW5wdXQiLCJkZWxldGUiLCJpc1RleHRJbnB1dCIsImhhcyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBZUE7O0FBRUEsSUFBTUEsV0FBV0MsUUFBUSxVQUFSLENBQWpCO0FBQ0EsSUFBTUMsWUFBWUQsUUFBUSxXQUFSLENBQWxCOztBQUVBLElBQUlFLHFCQUE4QixJQUFsQztBQUNBLElBQU1DLFNBQVMsSUFBSUMsR0FBSixFQUFmOztBQU1BLFNBQVNDLHFCQUFULEdBQTBDO0FBQ3hDLFNBQU9ILGtCQUFQO0FBQ0Q7O0FBT0QsU0FBU0ksY0FBVCxDQUF3QkMsV0FBeEIsRUFBOEM7QUFDNUMsTUFBSUwsdUJBQXVCSyxXQUF2QixJQUFzQ0EsZ0JBQWdCLElBQTFELEVBQWdFO0FBQzlETCx5QkFBcUJLLFdBQXJCO0FBQ0EsUUFBSVIsU0FBU1MsRUFBVCxLQUFnQixLQUFwQixFQUEyQjtBQUN6QlAsZ0JBQVVRLEtBQVYsQ0FBZ0JGLFdBQWhCO0FBQ0QsS0FGRCxNQUVPLElBQUlSLFNBQVNTLEVBQVQsS0FBZ0IsU0FBcEIsRUFBK0I7QUFDcENQLGdCQUFVUywwQkFBVixDQUNFSCxXQURGLEVBRUVOLFVBQVVVLGdCQUFWLENBQTJCQyxRQUEzQixDQUFvQ04sY0FGdEMsRUFHRSxJQUhGO0FBS0Q7QUFDRjtBQUNGOztBQU9ELFNBQVNPLGFBQVQsQ0FBdUJOLFdBQXZCLEVBQTZDO0FBQzNDLE1BQUlMLHVCQUF1QkssV0FBdkIsSUFBc0NBLGdCQUFnQixJQUExRCxFQUFnRTtBQUM5REwseUJBQXFCLElBQXJCO0FBQ0EsUUFBSUgsU0FBU1MsRUFBVCxLQUFnQixLQUFwQixFQUEyQjtBQUN6QlAsZ0JBQVVhLElBQVYsQ0FBZVAsV0FBZjtBQUNELEtBRkQsTUFFTyxJQUFJUixTQUFTUyxFQUFULEtBQWdCLFNBQXBCLEVBQStCO0FBQ3BDUCxnQkFBVVMsMEJBQVYsQ0FDRUgsV0FERixFQUVFTixVQUFVVSxnQkFBVixDQUEyQkMsUUFBM0IsQ0FBb0NDLGFBRnRDLEVBR0UsSUFIRjtBQUtEO0FBQ0Y7QUFDRjs7QUFFRCxTQUFTRSxhQUFULENBQXVCUixXQUF2QixFQUE0QztBQUMxQ0osU0FBT2EsR0FBUCxDQUFXVCxXQUFYO0FBQ0Q7O0FBRUQsU0FBU1UsZUFBVCxDQUF5QlYsV0FBekIsRUFBOEM7QUFDNUNKLFNBQU9lLE1BQVAsQ0FBY1gsV0FBZDtBQUNEOztBQUVELFNBQVNZLFdBQVQsQ0FBcUJaLFdBQXJCLEVBQTBDO0FBQ3hDLFNBQU9KLE9BQU9pQixHQUFQLENBQVdiLFdBQVgsQ0FBUDtBQUNEOztBQUVEYyxPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZqQiw4Q0FEZTtBQUVmQyxnQ0FGZTtBQUdmTyw4QkFIZTtBQUlmRSw4QkFKZTtBQUtmRSxrQ0FMZTtBQU1mRTtBQU5lLENBQWpCIiwiZmlsZSI6IlRleHRJbnB1dFN0YXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKlxuICogVGhpcyBjbGFzcyBpcyByZXNwb25zaWJsZSBmb3IgY29vcmRpbmF0aW5nIHRoZSBcImZvY3VzZWRcIlxuICogc3RhdGUgZm9yIFRleHRJbnB1dHMuIEFsbCBjYWxscyByZWxhdGluZyB0byB0aGUga2V5Ym9hcmRcbiAqIHNob3VsZCBiZSBmdW5uZWxlZCB0aHJvdWdoIGhlcmVcbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IFBsYXRmb3JtID0gcmVxdWlyZSgnUGxhdGZvcm0nKTtcbmNvbnN0IFVJTWFuYWdlciA9IHJlcXVpcmUoJ1VJTWFuYWdlcicpO1xuXG5sZXQgY3VycmVudGx5Rm9jdXNlZElEOiA/bnVtYmVyID0gbnVsbDtcbmNvbnN0IGlucHV0cyA9IG5ldyBTZXQoKTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBJRCBvZiB0aGUgY3VycmVudGx5IGZvY3VzZWQgdGV4dCBmaWVsZCwgaWYgb25lIGV4aXN0c1xuICogSWYgbm8gdGV4dCBmaWVsZCBpcyBmb2N1c2VkIGl0IHJldHVybnMgbnVsbFxuICovXG5mdW5jdGlvbiBjdXJyZW50bHlGb2N1c2VkRmllbGQoKTogP251bWJlciB7XG4gIHJldHVybiBjdXJyZW50bHlGb2N1c2VkSUQ7XG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IFRleHRJbnB1dElEIGlkIG9mIHRoZSB0ZXh0IGZpZWxkIHRvIGZvY3VzXG4gKiBGb2N1c2VzIHRoZSBzcGVjaWZpZWQgdGV4dCBmaWVsZFxuICogbm9vcCBpZiB0aGUgdGV4dCBmaWVsZCB3YXMgYWxyZWFkeSBmb2N1c2VkXG4gKi9cbmZ1bmN0aW9uIGZvY3VzVGV4dElucHV0KHRleHRGaWVsZElEOiA/bnVtYmVyKSB7XG4gIGlmIChjdXJyZW50bHlGb2N1c2VkSUQgIT09IHRleHRGaWVsZElEICYmIHRleHRGaWVsZElEICE9PSBudWxsKSB7XG4gICAgY3VycmVudGx5Rm9jdXNlZElEID0gdGV4dEZpZWxkSUQ7XG4gICAgaWYgKFBsYXRmb3JtLk9TID09PSAnaW9zJykge1xuICAgICAgVUlNYW5hZ2VyLmZvY3VzKHRleHRGaWVsZElEKTtcbiAgICB9IGVsc2UgaWYgKFBsYXRmb3JtLk9TID09PSAnYW5kcm9pZCcpIHtcbiAgICAgIFVJTWFuYWdlci5kaXNwYXRjaFZpZXdNYW5hZ2VyQ29tbWFuZChcbiAgICAgICAgdGV4dEZpZWxkSUQsXG4gICAgICAgIFVJTWFuYWdlci5BbmRyb2lkVGV4dElucHV0LkNvbW1hbmRzLmZvY3VzVGV4dElucHV0LFxuICAgICAgICBudWxsLFxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdGV4dEZpZWxkSUQgaWQgb2YgdGhlIHRleHQgZmllbGQgdG8gdW5mb2N1c1xuICogVW5mb2N1c2VzIHRoZSBzcGVjaWZpZWQgdGV4dCBmaWVsZFxuICogbm9vcCBpZiBpdCB3YXNuJ3QgZm9jdXNlZFxuICovXG5mdW5jdGlvbiBibHVyVGV4dElucHV0KHRleHRGaWVsZElEOiA/bnVtYmVyKSB7XG4gIGlmIChjdXJyZW50bHlGb2N1c2VkSUQgPT09IHRleHRGaWVsZElEICYmIHRleHRGaWVsZElEICE9PSBudWxsKSB7XG4gICAgY3VycmVudGx5Rm9jdXNlZElEID0gbnVsbDtcbiAgICBpZiAoUGxhdGZvcm0uT1MgPT09ICdpb3MnKSB7XG4gICAgICBVSU1hbmFnZXIuYmx1cih0ZXh0RmllbGRJRCk7XG4gICAgfSBlbHNlIGlmIChQbGF0Zm9ybS5PUyA9PT0gJ2FuZHJvaWQnKSB7XG4gICAgICBVSU1hbmFnZXIuZGlzcGF0Y2hWaWV3TWFuYWdlckNvbW1hbmQoXG4gICAgICAgIHRleHRGaWVsZElELFxuICAgICAgICBVSU1hbmFnZXIuQW5kcm9pZFRleHRJbnB1dC5Db21tYW5kcy5ibHVyVGV4dElucHV0LFxuICAgICAgICBudWxsLFxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJJbnB1dCh0ZXh0RmllbGRJRDogbnVtYmVyKSB7XG4gIGlucHV0cy5hZGQodGV4dEZpZWxkSUQpO1xufVxuXG5mdW5jdGlvbiB1bnJlZ2lzdGVySW5wdXQodGV4dEZpZWxkSUQ6IG51bWJlcikge1xuICBpbnB1dHMuZGVsZXRlKHRleHRGaWVsZElEKTtcbn1cblxuZnVuY3Rpb24gaXNUZXh0SW5wdXQodGV4dEZpZWxkSUQ6IG51bWJlcikge1xuICByZXR1cm4gaW5wdXRzLmhhcyh0ZXh0RmllbGRJRCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjdXJyZW50bHlGb2N1c2VkRmllbGQsXG4gIGZvY3VzVGV4dElucHV0LFxuICBibHVyVGV4dElucHV0LFxuICByZWdpc3RlcklucHV0LFxuICB1bnJlZ2lzdGVySW5wdXQsXG4gIGlzVGV4dElucHV0LFxufTtcbiJdfQ==