ebadebd06974020efb7404134b710dd3

'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ListViewDataSource = require('ListViewDataSource');
var React = require('React');
var ScrollView = require('ScrollView');
var StaticRenderer = require('StaticRenderer');

var ListViewMock = function (_React$Component) {
  _inherits(ListViewMock, _React$Component);

  function ListViewMock() {
    _classCallCheck(this, ListViewMock);

    return _possibleConstructorReturn(this, (ListViewMock.__proto__ || Object.getPrototypeOf(ListViewMock)).apply(this, arguments));
  }

  _createClass(ListViewMock, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      ListViewMock.latestRef = this;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          dataSource = _props.dataSource,
          renderFooter = _props.renderFooter,
          renderHeader = _props.renderHeader;

      var rows = [renderHeader && renderHeader()];
      var allRowIDs = dataSource.rowIdentities;
      for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
        var sectionID = dataSource.sectionIdentities[sectionIdx];
        var rowIDs = allRowIDs[sectionIdx];
        for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {
          var rowID = rowIDs[rowIdx];

          rows.push(React.createElement(StaticRenderer, {
            key: 'section_' + sectionID + '_row_' + rowID,
            shouldUpdate: true,
            render: this.props.renderRow.bind(null, dataSource.getRowData(sectionIdx, rowIdx), sectionID, rowID)
          }));
        }
      }
      renderFooter && rows.push(renderFooter());
      return this.props.renderScrollComponent(_extends({}, this.props, { children: rows }));
    }
  }]);

  return ListViewMock;
}(React.Component);

ListViewMock.defaultProps = {
  renderScrollComponent: function renderScrollComponent(props) {
    return React.createElement(ScrollView, props);
  }
};
ListViewMock.DataSource = ListViewDataSource;


module.exports = ListViewMock;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkxpc3RWaWV3TW9jay5qcyJdLCJuYW1lcyI6WyJMaXN0Vmlld0RhdGFTb3VyY2UiLCJyZXF1aXJlIiwiUmVhY3QiLCJTY3JvbGxWaWV3IiwiU3RhdGljUmVuZGVyZXIiLCJMaXN0Vmlld01vY2siLCJsYXRlc3RSZWYiLCJwcm9wcyIsImRhdGFTb3VyY2UiLCJyZW5kZXJGb290ZXIiLCJyZW5kZXJIZWFkZXIiLCJyb3dzIiwiYWxsUm93SURzIiwicm93SWRlbnRpdGllcyIsInNlY3Rpb25JZHgiLCJsZW5ndGgiLCJzZWN0aW9uSUQiLCJzZWN0aW9uSWRlbnRpdGllcyIsInJvd0lEcyIsInJvd0lkeCIsInJvd0lEIiwicHVzaCIsInJlbmRlclJvdyIsImJpbmQiLCJnZXRSb3dEYXRhIiwicmVuZGVyU2Nyb2xsQ29tcG9uZW50IiwiY2hpbGRyZW4iLCJDb21wb25lbnQiLCJkZWZhdWx0UHJvcHMiLCJEYXRhU291cmNlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IjtBQVNBOzs7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxxQkFBcUJDLFFBQVEsb0JBQVIsQ0FBM0I7QUFDQSxJQUFNQyxRQUFRRCxRQUFRLE9BQVIsQ0FBZDtBQUNBLElBQU1FLGFBQWFGLFFBQVEsWUFBUixDQUFuQjtBQUNBLElBQU1HLGlCQUFpQkgsUUFBUSxnQkFBUixDQUF2Qjs7SUFFTUksWTs7Ozs7Ozs7Ozs7d0NBVWdCO0FBQ2xCQSxtQkFBYUMsU0FBYixHQUF5QixJQUF6QjtBQUNEOzs7NkJBQ1E7QUFBQSxtQkFDMEMsS0FBS0MsS0FEL0M7QUFBQSxVQUNBQyxVQURBLFVBQ0FBLFVBREE7QUFBQSxVQUNZQyxZQURaLFVBQ1lBLFlBRFo7QUFBQSxVQUMwQkMsWUFEMUIsVUFDMEJBLFlBRDFCOztBQUVQLFVBQU1DLE9BQU8sQ0FBQ0QsZ0JBQWdCQSxjQUFqQixDQUFiO0FBQ0EsVUFBTUUsWUFBWUosV0FBV0ssYUFBN0I7QUFDQSxXQUFLLElBQUlDLGFBQWEsQ0FBdEIsRUFBeUJBLGFBQWFGLFVBQVVHLE1BQWhELEVBQXdERCxZQUF4RCxFQUFzRTtBQUNwRSxZQUFNRSxZQUFZUixXQUFXUyxpQkFBWCxDQUE2QkgsVUFBN0IsQ0FBbEI7QUFDQSxZQUFNSSxTQUFTTixVQUFVRSxVQUFWLENBQWY7QUFDQSxhQUFLLElBQUlLLFNBQVMsQ0FBbEIsRUFBcUJBLFNBQVNELE9BQU9ILE1BQXJDLEVBQTZDSSxRQUE3QyxFQUF1RDtBQUNyRCxjQUFNQyxRQUFRRixPQUFPQyxNQUFQLENBQWQ7O0FBRUFSLGVBQUtVLElBQUwsQ0FDRSxvQkFBQyxjQUFEO0FBQ0UsaUJBQUssYUFBYUwsU0FBYixHQUF5QixPQUF6QixHQUFtQ0ksS0FEMUM7QUFFRSwwQkFBYyxJQUZoQjtBQUdFLG9CQUFRLEtBQUtiLEtBQUwsQ0FBV2UsU0FBWCxDQUFxQkMsSUFBckIsQ0FDTixJQURNLEVBRU5mLFdBQVdnQixVQUFYLENBQXNCVixVQUF0QixFQUFrQ0ssTUFBbEMsQ0FGTSxFQUdOSCxTQUhNLEVBSU5JLEtBSk07QUFIVixZQURGO0FBWUQ7QUFDRjtBQUNEWCxzQkFBZ0JFLEtBQUtVLElBQUwsQ0FBVVosY0FBVixDQUFoQjtBQUNBLGFBQU8sS0FBS0YsS0FBTCxDQUFXa0IscUJBQVgsY0FBcUMsS0FBS2xCLEtBQTFDLElBQWlEbUIsVUFBVWYsSUFBM0QsSUFBUDtBQUNEOzs7O0VBdkN3QlQsTUFBTXlCLFM7O0FBQTNCdEIsWSxDQUVHdUIsWSxHQUFlO0FBTXBCSCx5QkFBdUI7QUFBQSxXQUFTLG9CQUFDLFVBQUQsRUFBZ0JsQixLQUFoQixDQUFUO0FBQUE7QUFOSCxDO0FBRmxCRixZLENBd0NHd0IsVSxHQUFhN0Isa0I7OztBQUd0QjhCLE9BQU9DLE9BQVAsR0FBaUIxQixZQUFqQiIsImZpbGUiOiJMaXN0Vmlld01vY2suanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICovXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IExpc3RWaWV3RGF0YVNvdXJjZSA9IHJlcXVpcmUoJ0xpc3RWaWV3RGF0YVNvdXJjZScpO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdSZWFjdCcpO1xuY29uc3QgU2Nyb2xsVmlldyA9IHJlcXVpcmUoJ1Njcm9sbFZpZXcnKTtcbmNvbnN0IFN0YXRpY1JlbmRlcmVyID0gcmVxdWlyZSgnU3RhdGljUmVuZGVyZXInKTtcblxuY2xhc3MgTGlzdFZpZXdNb2NrIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PCRGbG93Rml4TWVQcm9wcz4ge1xuICBzdGF0aWMgbGF0ZXN0UmVmOiA/TGlzdFZpZXdNb2NrO1xuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIC8qICRGbG93Rml4TWUoPj0wLjU5LjAgc2l0ZT1yZWFjdF9uYXRpdmVfZmIpIFRoaXMgY29tbWVudCBzdXBwcmVzc2VzIGFuXG4gICAgICogZXJyb3IgY2F1Z2h0IGJ5IEZsb3cgMC41OSB3aGljaCB3YXMgbm90IGNhdWdodCBiZWZvcmUuIE1vc3QgbGlrZWx5LCB0aGlzXG4gICAgICogZXJyb3IgaXMgYmVjYXVzZSBhbiBleHBvcnRlZCBmdW5jdGlvbiBwYXJhbWV0ZXIgaXMgbWlzc2luZyBhblxuICAgICAqIGFubm90YXRpb24uIFdpdGhvdXQgYW4gYW5ub3RhdGlvbiwgdGhlc2UgcGFyYW1ldGVycyBhcmUgdW5jb3ZlcmVkIGJ5XG4gICAgICogRmxvdy4gKi9cbiAgICByZW5kZXJTY3JvbGxDb21wb25lbnQ6IHByb3BzID0+IDxTY3JvbGxWaWV3IHsuLi5wcm9wc30gLz4sXG4gIH07XG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIExpc3RWaWV3TW9jay5sYXRlc3RSZWYgPSB0aGlzO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7ZGF0YVNvdXJjZSwgcmVuZGVyRm9vdGVyLCByZW5kZXJIZWFkZXJ9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCByb3dzID0gW3JlbmRlckhlYWRlciAmJiByZW5kZXJIZWFkZXIoKV07XG4gICAgY29uc3QgYWxsUm93SURzID0gZGF0YVNvdXJjZS5yb3dJZGVudGl0aWVzO1xuICAgIGZvciAobGV0IHNlY3Rpb25JZHggPSAwOyBzZWN0aW9uSWR4IDwgYWxsUm93SURzLmxlbmd0aDsgc2VjdGlvbklkeCsrKSB7XG4gICAgICBjb25zdCBzZWN0aW9uSUQgPSBkYXRhU291cmNlLnNlY3Rpb25JZGVudGl0aWVzW3NlY3Rpb25JZHhdO1xuICAgICAgY29uc3Qgcm93SURzID0gYWxsUm93SURzW3NlY3Rpb25JZHhdO1xuICAgICAgZm9yIChsZXQgcm93SWR4ID0gMDsgcm93SWR4IDwgcm93SURzLmxlbmd0aDsgcm93SWR4KyspIHtcbiAgICAgICAgY29uc3Qgcm93SUQgPSByb3dJRHNbcm93SWR4XTtcbiAgICAgICAgLy8gUm93IElEcyBhcmUgb25seSB1bmlxdWUgaW4gYSBzZWN0aW9uXG4gICAgICAgIHJvd3MucHVzaChcbiAgICAgICAgICA8U3RhdGljUmVuZGVyZXJcbiAgICAgICAgICAgIGtleT17J3NlY3Rpb25fJyArIHNlY3Rpb25JRCArICdfcm93XycgKyByb3dJRH1cbiAgICAgICAgICAgIHNob3VsZFVwZGF0ZT17dHJ1ZX1cbiAgICAgICAgICAgIHJlbmRlcj17dGhpcy5wcm9wcy5yZW5kZXJSb3cuYmluZChcbiAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgZGF0YVNvdXJjZS5nZXRSb3dEYXRhKHNlY3Rpb25JZHgsIHJvd0lkeCksXG4gICAgICAgICAgICAgIHNlY3Rpb25JRCxcbiAgICAgICAgICAgICAgcm93SUQsXG4gICAgICAgICAgICApfVxuICAgICAgICAgIC8+LFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICByZW5kZXJGb290ZXIgJiYgcm93cy5wdXNoKHJlbmRlckZvb3RlcigpKTtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5yZW5kZXJTY3JvbGxDb21wb25lbnQoey4uLnRoaXMucHJvcHMsIGNoaWxkcmVuOiByb3dzfSk7XG4gIH1cbiAgc3RhdGljIERhdGFTb3VyY2UgPSBMaXN0Vmlld0RhdGFTb3VyY2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTGlzdFZpZXdNb2NrO1xuIl19