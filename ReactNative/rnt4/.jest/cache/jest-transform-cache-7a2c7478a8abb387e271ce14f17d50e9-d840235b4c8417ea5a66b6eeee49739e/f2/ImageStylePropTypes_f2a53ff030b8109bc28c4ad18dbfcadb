c9b9f26ad495f965777b000d32e4101b

'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var ColorPropType = require('ColorPropType');
var ImageResizeMode = require('ImageResizeMode');
var LayoutPropTypes = require('LayoutPropTypes');
var ReactPropTypes = require('prop-types');
var ShadowPropTypesIOS = require('ShadowPropTypesIOS');
var TransformPropTypes = require('TransformPropTypes');

var ImageStylePropTypes = _extends({}, LayoutPropTypes, ShadowPropTypesIOS, TransformPropTypes, {
  resizeMode: ReactPropTypes.oneOf(Object.keys(ImageResizeMode)),
  backfaceVisibility: ReactPropTypes.oneOf(['visible', 'hidden']),
  backgroundColor: ColorPropType,
  borderColor: ColorPropType,
  borderWidth: ReactPropTypes.number,
  borderRadius: ReactPropTypes.number,
  overflow: ReactPropTypes.oneOf(['visible', 'hidden']),

  tintColor: ColorPropType,
  opacity: ReactPropTypes.number,

  overlayColor: ReactPropTypes.string,

  borderTopLeftRadius: ReactPropTypes.number,
  borderTopRightRadius: ReactPropTypes.number,
  borderBottomLeftRadius: ReactPropTypes.number,
  borderBottomRightRadius: ReactPropTypes.number
});

module.exports = ImageStylePropTypes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkltYWdlU3R5bGVQcm9wVHlwZXMuanMiXSwibmFtZXMiOlsiQ29sb3JQcm9wVHlwZSIsInJlcXVpcmUiLCJJbWFnZVJlc2l6ZU1vZGUiLCJMYXlvdXRQcm9wVHlwZXMiLCJSZWFjdFByb3BUeXBlcyIsIlNoYWRvd1Byb3BUeXBlc0lPUyIsIlRyYW5zZm9ybVByb3BUeXBlcyIsIkltYWdlU3R5bGVQcm9wVHlwZXMiLCJyZXNpemVNb2RlIiwib25lT2YiLCJPYmplY3QiLCJrZXlzIiwiYmFja2ZhY2VWaXNpYmlsaXR5IiwiYmFja2dyb3VuZENvbG9yIiwiYm9yZGVyQ29sb3IiLCJib3JkZXJXaWR0aCIsIm51bWJlciIsImJvcmRlclJhZGl1cyIsIm92ZXJmbG93IiwidGludENvbG9yIiwib3BhY2l0eSIsIm92ZXJsYXlDb2xvciIsInN0cmluZyIsImJvcmRlclRvcExlZnRSYWRpdXMiLCJib3JkZXJUb3BSaWdodFJhZGl1cyIsImJvcmRlckJvdHRvbUxlZnRSYWRpdXMiLCJib3JkZXJCb3R0b21SaWdodFJhZGl1cyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7QUFTQTs7OztBQUVBLElBQU1BLGdCQUFnQkMsUUFBUSxlQUFSLENBQXRCO0FBQ0EsSUFBTUMsa0JBQWtCRCxRQUFRLGlCQUFSLENBQXhCO0FBQ0EsSUFBTUUsa0JBQWtCRixRQUFRLGlCQUFSLENBQXhCO0FBQ0EsSUFBTUcsaUJBQWlCSCxRQUFRLFlBQVIsQ0FBdkI7QUFDQSxJQUFNSSxxQkFBcUJKLFFBQVEsb0JBQVIsQ0FBM0I7QUFDQSxJQUFNSyxxQkFBcUJMLFFBQVEsb0JBQVIsQ0FBM0I7O0FBRUEsSUFBTU0sbUNBQ0RKLGVBREMsRUFFREUsa0JBRkMsRUFHREMsa0JBSEM7QUFJSkUsY0FBWUosZUFBZUssS0FBZixDQUFxQkMsT0FBT0MsSUFBUCxDQUFZVCxlQUFaLENBQXJCLENBSlI7QUFLSlUsc0JBQW9CUixlQUFlSyxLQUFmLENBQXFCLENBQUMsU0FBRCxFQUFZLFFBQVosQ0FBckIsQ0FMaEI7QUFNSkksbUJBQWlCYixhQU5iO0FBT0pjLGVBQWFkLGFBUFQ7QUFRSmUsZUFBYVgsZUFBZVksTUFSeEI7QUFTSkMsZ0JBQWNiLGVBQWVZLE1BVHpCO0FBVUpFLFlBQVVkLGVBQWVLLEtBQWYsQ0FBcUIsQ0FBQyxTQUFELEVBQVksUUFBWixDQUFyQixDQVZOOztBQWVKVSxhQUFXbkIsYUFmUDtBQWdCSm9CLFdBQVNoQixlQUFlWSxNQWhCcEI7O0FBa0NKSyxnQkFBY2pCLGVBQWVrQixNQWxDekI7O0FBcUNKQyx1QkFBcUJuQixlQUFlWSxNQXJDaEM7QUFzQ0pRLHdCQUFzQnBCLGVBQWVZLE1BdENqQztBQXVDSlMsMEJBQXdCckIsZUFBZVksTUF2Q25DO0FBd0NKVSwyQkFBeUJ0QixlQUFlWTtBQXhDcEMsRUFBTjs7QUEyQ0FXLE9BQU9DLE9BQVAsR0FBaUJyQixtQkFBakIiLCJmaWxlIjoiSW1hZ2VTdHlsZVByb3BUeXBlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqIEBmb3JtYXRcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBDb2xvclByb3BUeXBlID0gcmVxdWlyZSgnQ29sb3JQcm9wVHlwZScpO1xuY29uc3QgSW1hZ2VSZXNpemVNb2RlID0gcmVxdWlyZSgnSW1hZ2VSZXNpemVNb2RlJyk7XG5jb25zdCBMYXlvdXRQcm9wVHlwZXMgPSByZXF1aXJlKCdMYXlvdXRQcm9wVHlwZXMnKTtcbmNvbnN0IFJlYWN0UHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuY29uc3QgU2hhZG93UHJvcFR5cGVzSU9TID0gcmVxdWlyZSgnU2hhZG93UHJvcFR5cGVzSU9TJyk7XG5jb25zdCBUcmFuc2Zvcm1Qcm9wVHlwZXMgPSByZXF1aXJlKCdUcmFuc2Zvcm1Qcm9wVHlwZXMnKTtcblxuY29uc3QgSW1hZ2VTdHlsZVByb3BUeXBlcyA9IHtcbiAgLi4uTGF5b3V0UHJvcFR5cGVzLFxuICAuLi5TaGFkb3dQcm9wVHlwZXNJT1MsXG4gIC4uLlRyYW5zZm9ybVByb3BUeXBlcyxcbiAgcmVzaXplTW9kZTogUmVhY3RQcm9wVHlwZXMub25lT2YoT2JqZWN0LmtleXMoSW1hZ2VSZXNpemVNb2RlKSksXG4gIGJhY2tmYWNlVmlzaWJpbGl0eTogUmVhY3RQcm9wVHlwZXMub25lT2YoWyd2aXNpYmxlJywgJ2hpZGRlbiddKSxcbiAgYmFja2dyb3VuZENvbG9yOiBDb2xvclByb3BUeXBlLFxuICBib3JkZXJDb2xvcjogQ29sb3JQcm9wVHlwZSxcbiAgYm9yZGVyV2lkdGg6IFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgYm9yZGVyUmFkaXVzOiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gIG92ZXJmbG93OiBSZWFjdFByb3BUeXBlcy5vbmVPZihbJ3Zpc2libGUnLCAnaGlkZGVuJ10pLFxuXG4gIC8qKlxuICAgKiBDaGFuZ2VzIHRoZSBjb2xvciBvZiBhbGwgdGhlIG5vbi10cmFuc3BhcmVudCBwaXhlbHMgdG8gdGhlIHRpbnRDb2xvci5cbiAgICovXG4gIHRpbnRDb2xvcjogQ29sb3JQcm9wVHlwZSxcbiAgb3BhY2l0eTogUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogV2hlbiB0aGUgaW1hZ2UgaGFzIHJvdW5kZWQgY29ybmVycywgc3BlY2lmeWluZyBhbiBvdmVybGF5Q29sb3Igd2lsbFxuICAgKiBjYXVzZSB0aGUgcmVtYWluaW5nIHNwYWNlIGluIHRoZSBjb3JuZXJzIHRvIGJlIGZpbGxlZCB3aXRoIGEgc29saWQgY29sb3IuXG4gICAqIFRoaXMgaXMgdXNlZnVsIGluIGNhc2VzIHdoaWNoIGFyZSBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBBbmRyb2lkXG4gICAqIGltcGxlbWVudGF0aW9uIG9mIHJvdW5kZWQgY29ybmVyczpcbiAgICogICAtIENlcnRhaW4gcmVzaXplIG1vZGVzLCBzdWNoIGFzICdjb250YWluJ1xuICAgKiAgIC0gQW5pbWF0ZWQgR0lGc1xuICAgKlxuICAgKiBBIHR5cGljYWwgd2F5IHRvIHVzZSB0aGlzIHByb3AgaXMgd2l0aCBpbWFnZXMgZGlzcGxheWVkIG9uIGEgc29saWRcbiAgICogYmFja2dyb3VuZCBhbmQgc2V0dGluZyB0aGUgYG92ZXJsYXlDb2xvcmAgdG8gdGhlIHNhbWUgY29sb3JcbiAgICogYXMgdGhlIGJhY2tncm91bmQuXG4gICAqXG4gICAqIEZvciBkZXRhaWxzIG9mIGhvdyB0aGlzIHdvcmtzIHVuZGVyIHRoZSBob29kLCBzZWVcbiAgICogaHR0cDovL2ZyZXNjb2xpYi5vcmcvZG9jcy9yb3VuZGVkLWNvcm5lcnMtYW5kLWNpcmNsZXMuaHRtbFxuICAgKlxuICAgKiBAcGxhdGZvcm0gYW5kcm9pZFxuICAgKi9cbiAgb3ZlcmxheUNvbG9yOiBSZWFjdFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLy8gQW5kcm9pZC1TcGVjaWZpYyBzdHlsZXNcbiAgYm9yZGVyVG9wTGVmdFJhZGl1czogUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICBib3JkZXJUb3BSaWdodFJhZGl1czogUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICBib3JkZXJCb3R0b21MZWZ0UmFkaXVzOiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gIGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzOiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEltYWdlU3R5bGVQcm9wVHlwZXM7XG4iXX0=