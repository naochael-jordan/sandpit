{"version":3,"sources":["VirtualizeUtils.js"],"names":["invariant","require","elementsThatOverlapOffsets","offsets","itemCount","getFrameMetrics","out","outLength","ii","frame","trailingOffset","offset","length","kk","JSON","stringify","newRangeCount","prev","next","last","first","Math","max","min","computeWindowedRenderLimits","props","getFrameMetricsApprox","scrollMetrics","data","getItemCount","maxToRenderPerBatch","windowSize","velocity","visibleLength","visibleBegin","visibleEnd","overscanLength","leadFactor","fillPreference","overscanBegin","overscanEnd","lastItemOffset","overscanFirst","overscanLast","visible","newCellCount","maxNewCells","firstWillAddMore","firstShouldIncrement","lastWillAddMore","lastShouldIncrement","Error","VirtualizeUtils","module","exports"],"mappings":"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","file":"VirtualizeUtils.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst invariant = require('fbjs/lib/invariant');\n\n/**\n * Used to find the indices of the frames that overlap the given offsets. Useful for finding the\n * items that bound different windows of content, such as the visible area or the buffered overscan\n * area.\n */\nfunction elementsThatOverlapOffsets(\n  offsets: Array<number>,\n  itemCount: number,\n  getFrameMetrics: (index: number) => {length: number, offset: number},\n): Array<number> {\n  const out = [];\n  let outLength = 0;\n  for (let ii = 0; ii < itemCount; ii++) {\n    const frame = getFrameMetrics(ii);\n    const trailingOffset = frame.offset + frame.length;\n    for (let kk = 0; kk < offsets.length; kk++) {\n      if (out[kk] == null && trailingOffset >= offsets[kk]) {\n        out[kk] = ii;\n        outLength++;\n        if (kk === offsets.length - 1) {\n          invariant(\n            outLength === offsets.length,\n            'bad offsets input, should be in increasing order: %s',\n            JSON.stringify(offsets),\n          );\n          return out;\n        }\n      }\n    }\n  }\n  return out;\n}\n\n/**\n * Computes the number of elements in the `next` range that are new compared to the `prev` range.\n * Handy for calculating how many new items will be rendered when the render window changes so we\n * can restrict the number of new items render at once so that content can appear on the screen\n * faster.\n */\nfunction newRangeCount(\n  prev: {first: number, last: number},\n  next: {first: number, last: number},\n): number {\n  return (\n    next.last -\n    next.first +\n    1 -\n    Math.max(\n      0,\n      1 + Math.min(next.last, prev.last) - Math.max(next.first, prev.first),\n    )\n  );\n}\n\n/**\n * Custom logic for determining which items should be rendered given the current frame and scroll\n * metrics, as well as the previous render state. The algorithm may evolve over time, but generally\n * prioritizes the visible area first, then expands that with overscan regions ahead and behind,\n * biased in the direction of scroll.\n */\nfunction computeWindowedRenderLimits(\n  props: {\n    data: any,\n    getItemCount: (data: any) => number,\n    maxToRenderPerBatch: number,\n    windowSize: number,\n  },\n  prev: {first: number, last: number},\n  getFrameMetricsApprox: (index: number) => {length: number, offset: number},\n  scrollMetrics: {\n    dt: number,\n    offset: number,\n    velocity: number,\n    visibleLength: number,\n  },\n): {first: number, last: number} {\n  const {data, getItemCount, maxToRenderPerBatch, windowSize} = props;\n  const itemCount = getItemCount(data);\n  if (itemCount === 0) {\n    return prev;\n  }\n  const {offset, velocity, visibleLength} = scrollMetrics;\n\n  // Start with visible area, then compute maximum overscan region by expanding from there, biased\n  // in the direction of scroll. Total overscan area is capped, which should cap memory consumption\n  // too.\n  const visibleBegin = Math.max(0, offset);\n  const visibleEnd = visibleBegin + visibleLength;\n  const overscanLength = (windowSize - 1) * visibleLength;\n\n  // Considering velocity seems to introduce more churn than it's worth.\n  const leadFactor = 0.5; // Math.max(0, Math.min(1, velocity / 25 + 0.5));\n\n  const fillPreference =\n    velocity > 1 ? 'after' : velocity < -1 ? 'before' : 'none';\n\n  const overscanBegin = Math.max(\n    0,\n    visibleBegin - (1 - leadFactor) * overscanLength,\n  );\n  const overscanEnd = Math.max(0, visibleEnd + leadFactor * overscanLength);\n\n  const lastItemOffset = getFrameMetricsApprox(itemCount - 1).offset;\n  if (lastItemOffset < overscanBegin) {\n    // Entire list is before our overscan window\n    return {\n      first: Math.max(0, itemCount - 1 - maxToRenderPerBatch),\n      last: itemCount - 1,\n    };\n  }\n\n  // Find the indices that correspond to the items at the render boundaries we're targeting.\n  let [overscanFirst, first, last, overscanLast] = elementsThatOverlapOffsets(\n    [overscanBegin, visibleBegin, visibleEnd, overscanEnd],\n    props.getItemCount(props.data),\n    getFrameMetricsApprox,\n  );\n  overscanFirst = overscanFirst == null ? 0 : overscanFirst;\n  first = first == null ? Math.max(0, overscanFirst) : first;\n  overscanLast = overscanLast == null ? itemCount - 1 : overscanLast;\n  last =\n    last == null\n      ? Math.min(overscanLast, first + maxToRenderPerBatch - 1)\n      : last;\n  const visible = {first, last};\n\n  // We want to limit the number of new cells we're rendering per batch so that we can fill the\n  // content on the screen quickly. If we rendered the entire overscan window at once, the user\n  // could be staring at white space for a long time waiting for a bunch of offscreen content to\n  // render.\n  let newCellCount = newRangeCount(prev, visible);\n\n  while (true) {\n    if (first <= overscanFirst && last >= overscanLast) {\n      // If we fill the entire overscan range, we're done.\n      break;\n    }\n    const maxNewCells = newCellCount >= maxToRenderPerBatch;\n    const firstWillAddMore = first <= prev.first || first > prev.last;\n    const firstShouldIncrement =\n      first > overscanFirst && (!maxNewCells || !firstWillAddMore);\n    const lastWillAddMore = last >= prev.last || last < prev.first;\n    const lastShouldIncrement =\n      last < overscanLast && (!maxNewCells || !lastWillAddMore);\n    if (maxNewCells && !firstShouldIncrement && !lastShouldIncrement) {\n      // We only want to stop if we've hit maxNewCells AND we cannot increment first or last\n      // without rendering new items. This let's us preserve as many already rendered items as\n      // possible, reducing render churn and keeping the rendered overscan range as large as\n      // possible.\n      break;\n    }\n    if (\n      firstShouldIncrement &&\n      !(fillPreference === 'after' && lastShouldIncrement && lastWillAddMore)\n    ) {\n      if (firstWillAddMore) {\n        newCellCount++;\n      }\n      first--;\n    }\n    if (\n      lastShouldIncrement &&\n      !(fillPreference === 'before' && firstShouldIncrement && firstWillAddMore)\n    ) {\n      if (lastWillAddMore) {\n        newCellCount++;\n      }\n      last++;\n    }\n  }\n  if (\n    !(\n      last >= first &&\n      first >= 0 &&\n      last < itemCount &&\n      first >= overscanFirst &&\n      last <= overscanLast &&\n      first <= visible.first &&\n      last >= visible.last\n    )\n  ) {\n    throw new Error(\n      'Bad window calculation ' +\n        JSON.stringify({\n          first,\n          last,\n          itemCount,\n          overscanFirst,\n          overscanLast,\n          visible,\n        }),\n    );\n  }\n  return {first, last};\n}\n\nconst VirtualizeUtils = {\n  computeWindowedRenderLimits,\n  elementsThatOverlapOffsets,\n  newRangeCount,\n};\n\nmodule.exports = VirtualizeUtils;\n"]}