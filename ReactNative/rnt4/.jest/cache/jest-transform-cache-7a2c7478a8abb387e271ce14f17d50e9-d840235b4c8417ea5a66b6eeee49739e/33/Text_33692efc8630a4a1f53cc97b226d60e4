e3663807afc447391087dcd36061ebf7


'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('React');
var ReactNativeViewAttributes = require('ReactNativeViewAttributes');
var TextAncestor = require('TextAncestor');
var TextPropTypes = require('TextPropTypes');
var Touchable = require('Touchable');
var UIManager = require('UIManager');

var createReactNativeComponentClass = require('createReactNativeComponentClass');
var nullthrows = require('fbjs/lib/nullthrows');
var processColor = require('processColor');

var PRESS_RECT_OFFSET = { top: 20, left: 20, right: 20, bottom: 30 };

var viewConfig = {
  validAttributes: _extends({}, ReactNativeViewAttributes.UIView, {
    isHighlighted: true,
    numberOfLines: true,
    ellipsizeMode: true,
    allowFontScaling: true,
    disabled: true,
    selectable: true,
    selectionColor: true,
    adjustsFontSizeToFit: true,
    minimumFontScale: true,
    textBreakStrategy: true,
    onTextLayout: true
  }),
  directEventTypes: {
    topTextLayout: {
      registrationName: 'onTextLayout'
    }
  },
  uiViewClassName: 'RCTText'
};

var TouchableText = function (_React$Component) {
  _inherits(TouchableText, _React$Component);

  function TouchableText() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, TouchableText);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TouchableText.__proto__ || Object.getPrototypeOf(TouchableText)).call.apply(_ref, [this].concat(args))), _this), _this.state = _extends({}, Touchable.Mixin.touchableGetInitialState(), {
      isHighlighted: false,
      createResponderHandlers: _this._createResponseHandlers.bind(_this),
      responseHandlers: null
    }), _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(TouchableText, [{
    key: 'render',
    value: function render() {
      var props = this.props;
      if (isTouchable(props)) {
        props = _extends({}, props, this.state.responseHandlers, {
          isHighlighted: this.state.isHighlighted
        });
      }
      if (props.selectionColor != null) {
        props = _extends({}, props, {
          selectionColor: processColor(props.selectionColor)
        });
      }
      if (__DEV__) {
        if (Touchable.TOUCH_TARGET_DEBUG && props.onPress != null) {
          props = _extends({}, props, {
            style: [props.style, { color: 'magenta' }]
          });
        }
      }
      return React.createElement(
        TextAncestor.Consumer,
        null,
        function (hasTextAncestor) {
          return hasTextAncestor ? React.createElement(RCTVirtualText, _extends({}, props, { ref: props.forwardedRef })) : React.createElement(
            TextAncestor.Provider,
            { value: true },
            React.createElement(RCTText, _extends({}, props, { ref: props.forwardedRef }))
          );
        }
      );
    }
  }, {
    key: '_createResponseHandlers',
    value: function _createResponseHandlers() {
      var _this2 = this;

      return {
        onStartShouldSetResponder: function onStartShouldSetResponder() {
          var onStartShouldSetResponder = _this2.props.onStartShouldSetResponder;

          var shouldSetResponder = (onStartShouldSetResponder == null ? false : onStartShouldSetResponder()) || isTouchable(_this2.props);

          if (shouldSetResponder) {
            _this2._attachTouchHandlers();
          }
          return shouldSetResponder;
        },
        onResponderGrant: function onResponderGrant(event, dispatchID) {
          nullthrows(_this2.touchableHandleResponderGrant)(event, dispatchID);
          if (_this2.props.onResponderGrant != null) {
            _this2.props.onResponderGrant.call(_this2, event, dispatchID);
          }
        },
        onResponderMove: function onResponderMove(event) {
          nullthrows(_this2.touchableHandleResponderMove)(event);
          if (_this2.props.onResponderMove != null) {
            _this2.props.onResponderMove.call(_this2, event);
          }
        },
        onResponderRelease: function onResponderRelease(event) {
          nullthrows(_this2.touchableHandleResponderRelease)(event);
          if (_this2.props.onResponderRelease != null) {
            _this2.props.onResponderRelease.call(_this2, event);
          }
        },
        onResponderTerminate: function onResponderTerminate(event) {
          nullthrows(_this2.touchableHandleResponderTerminate)(event);
          if (_this2.props.onResponderTerminate != null) {
            _this2.props.onResponderTerminate.call(_this2, event);
          }
        },
        onResponderTerminationRequest: function onResponderTerminationRequest() {
          var onResponderTerminationRequest = _this2.props.onResponderTerminationRequest;

          if (!nullthrows(_this2.touchableHandleResponderTerminationRequest)()) {
            return false;
          }
          if (onResponderTerminationRequest == null) {
            return true;
          }
          return onResponderTerminationRequest();
        }
      };
    }
  }, {
    key: '_attachTouchHandlers',
    value: function _attachTouchHandlers() {
      var _this3 = this;

      if (this.touchableGetPressRectOffset != null) {
        return;
      }
      for (var key in Touchable.Mixin) {
        if (typeof Touchable.Mixin[key] === 'function') {
          this[key] = Touchable.Mixin[key].bind(this);
        }
      }
      this.touchableHandleActivePressIn = function () {
        if (!_this3.props.suppressHighlighting && isTouchable(_this3.props)) {
          _this3.setState({ isHighlighted: true });
        }
      };
      this.touchableHandleActivePressOut = function () {
        if (!_this3.props.suppressHighlighting && isTouchable(_this3.props)) {
          _this3.setState({ isHighlighted: false });
        }
      };
      this.touchableHandlePress = function (event) {
        if (_this3.props.onPress != null) {
          _this3.props.onPress(event);
        }
      };
      this.touchableHandleLongPress = function (event) {
        if (_this3.props.onLongPress != null) {
          _this3.props.onLongPress(event);
        }
      };
      this.touchableGetPressRectOffset = function () {
        return _this3.props.pressRetentionOffset == null ? PRESS_RECT_OFFSET : _this3.props.pressRetentionOffset;
      };
    }
  }], [{
    key: 'getDerivedStateFromProps',
    value: function getDerivedStateFromProps(nextProps, prevState) {
      return prevState.responseHandlers == null && isTouchable(nextProps) ? _extends({}, prevState, {
        responseHandlers: prevState.createResponderHandlers()
      }) : null;
    }
  }]);

  return TouchableText;
}(React.Component);

TouchableText.defaultProps = {
  accessible: true,
  allowFontScaling: true,
  ellipsizeMode: 'tail'
};
TouchableText.viewConfig = viewConfig;


var isTouchable = function isTouchable(props) {
  return props.onPress != null || props.onLongPress != null || props.onStartShouldSetResponder != null;
};

var RCTText = createReactNativeComponentClass(viewConfig.uiViewClassName, function () {
  return viewConfig;
});

var RCTVirtualText = UIManager.RCTVirtualText == null ? RCTText : createReactNativeComponentClass('RCTVirtualText', function () {
  return {
    validAttributes: _extends({}, ReactNativeViewAttributes.UIView, {
      isHighlighted: true
    }),
    uiViewClassName: 'RCTVirtualText'
  };
});

var Text = function Text(props, forwardedRef) {
  return React.createElement(TouchableText, _extends({}, props, { forwardedRef: forwardedRef }));
};

var TextToExport = React.forwardRef(Text);

TextToExport.propTypes = TextPropTypes;

module.exports = TextToExport;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,