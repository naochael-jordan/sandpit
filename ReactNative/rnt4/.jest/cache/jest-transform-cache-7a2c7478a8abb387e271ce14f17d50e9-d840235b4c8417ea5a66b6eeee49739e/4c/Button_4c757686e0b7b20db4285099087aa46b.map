{"version":3,"sources":["Button.js"],"names":["ColorPropType","require","Platform","React","PropTypes","StyleSheet","Text","TouchableNativeFeedback","TouchableOpacity","View","invariant","Button","props","accessibilityLabel","color","onPress","title","hasTVPreferredFocus","disabled","testID","buttonStyles","styles","button","textStyles","text","OS","push","backgroundColor","accessibilityStates","buttonDisabled","textDisabled","formattedTitle","toUpperCase","Touchable","Component","propTypes","string","isRequired","bool","func","create","select","ios","android","elevation","borderRadius","textAlign","padding","fontSize","fontWeight","module","exports"],"mappings":"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","file":"Button.js","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst ColorPropType = require('ColorPropType');\nconst Platform = require('Platform');\nconst React = require('React');\nconst PropTypes = require('prop-types');\nconst StyleSheet = require('StyleSheet');\nconst Text = require('Text');\nconst TouchableNativeFeedback = require('TouchableNativeFeedback');\nconst TouchableOpacity = require('TouchableOpacity');\nconst View = require('View');\n\nconst invariant = require('fbjs/lib/invariant');\n\n/**\n * A basic button component that should render nicely on any platform. Supports\n * a minimal level of customization.\n *\n * <center><img src=\"img/buttonExample.png\"></img></center>\n *\n * If this button doesn't look right for your app, you can build your own\n * button using [TouchableOpacity](docs/touchableopacity.html)\n * or [TouchableNativeFeedback](docs/touchablenativefeedback.html).\n * For inspiration, look at the [source code for this button component](https://github.com/facebook/react-native/blob/master/Libraries/Components/Button.js).\n * Or, take a look at the [wide variety of button components built by the community](https://js.coach/react-native?search=button).\n *\n * Example usage:\n *\n * ```\n * import { Button } from 'react-native';\n * ...\n *\n * <Button\n *   onPress={onPressLearnMore}\n *   title=\"Learn More\"\n *   color=\"#841584\"\n *   accessibilityLabel=\"Learn more about this purple button\"\n * />\n * ```\n *\n */\n\nclass Button extends React.Component<{\n  title: string,\n  onPress: () => any,\n  color?: ?string,\n  hasTVPreferredFocus?: ?boolean,\n  accessibilityLabel?: ?string,\n  disabled?: ?boolean,\n  testID?: ?string,\n}> {\n  static propTypes = {\n    /**\n     * Text to display inside the button\n     */\n    title: PropTypes.string.isRequired,\n    /**\n     * Text to display for blindness accessibility features\n     */\n    accessibilityLabel: PropTypes.string,\n    /**\n     * Color of the text (iOS), or background color of the button (Android)\n     */\n    color: ColorPropType,\n    /**\n     * If true, disable all interactions for this component.\n     */\n    disabled: PropTypes.bool,\n    /**\n     * TV preferred focus (see documentation for the View component).\n     */\n    hasTVPreferredFocus: PropTypes.bool,\n    /**\n     * Handler to be called when the user taps the button\n     */\n    onPress: PropTypes.func.isRequired,\n    /**\n     * Used to locate this view in end-to-end tests.\n     */\n    testID: PropTypes.string,\n  };\n\n  render() {\n    const {\n      accessibilityLabel,\n      color,\n      onPress,\n      title,\n      hasTVPreferredFocus,\n      disabled,\n      testID,\n    } = this.props;\n    const buttonStyles = [styles.button];\n    const textStyles = [styles.text];\n    if (color) {\n      if (Platform.OS === 'ios') {\n        textStyles.push({color: color});\n      } else {\n        buttonStyles.push({backgroundColor: color});\n      }\n    }\n    const accessibilityStates = [];\n    if (disabled) {\n      buttonStyles.push(styles.buttonDisabled);\n      textStyles.push(styles.textDisabled);\n      accessibilityStates.push('disabled');\n    }\n    invariant(\n      typeof title === 'string',\n      'The title prop of a Button must be a string',\n    );\n    const formattedTitle =\n      Platform.OS === 'android' ? title.toUpperCase() : title;\n    const Touchable =\n      Platform.OS === 'android' ? TouchableNativeFeedback : TouchableOpacity;\n    return (\n      <Touchable\n        accessibilityLabel={accessibilityLabel}\n        accessibilityRole=\"button\"\n        accessibilityStates={accessibilityStates}\n        hasTVPreferredFocus={hasTVPreferredFocus}\n        testID={testID}\n        disabled={disabled}\n        onPress={onPress}>\n        <View style={buttonStyles}>\n          <Text style={textStyles} disabled={disabled}>\n            {formattedTitle}\n          </Text>\n        </View>\n      </Touchable>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  button: Platform.select({\n    ios: {},\n    android: {\n      elevation: 4,\n      // Material design blue from https://material.google.com/style/color.html#color-color-palette\n      backgroundColor: '#2196F3',\n      borderRadius: 2,\n    },\n  }),\n  text: Platform.select({\n    ios: {\n      // iOS blue from https://developer.apple.com/ios/human-interface-guidelines/visual-design/color/\n      color: '#007AFF',\n      textAlign: 'center',\n      padding: 8,\n      fontSize: 18,\n    },\n    android: {\n      color: 'white',\n      textAlign: 'center',\n      padding: 8,\n      fontWeight: '500',\n    },\n  }),\n  buttonDisabled: Platform.select({\n    ios: {},\n    android: {\n      elevation: 0,\n      backgroundColor: '#dfdfdf',\n    },\n  }),\n  textDisabled: Platform.select({\n    ios: {\n      color: '#cdcdcd',\n    },\n    android: {\n      color: '#a1a1a1',\n    },\n  }),\n});\n\nmodule.exports = Button;\n"]}