d0f4d664d7ce4f32590653009972546d


'use strict';

var NativeModules = require('NativeModules');

var invariant = require('fbjs/lib/invariant');

var FrameRateLogger = {
  setGlobalOptions: function setGlobalOptions(options) {
    if (options.debug !== undefined) {
      invariant(NativeModules.FrameRateLogger, 'Trying to debug FrameRateLogger without the native module!');
    }
    if (NativeModules.FrameRateLogger) {
      var optionsClone = {
        debug: !!options.debug,
        reportStackTraces: !!options.reportStackTraces
      };
      Object.freeze(optionsClone);
      Object.seal(optionsClone);
      NativeModules.FrameRateLogger.setGlobalOptions(optionsClone);
    }
  },

  setContext: function setContext(context) {
    NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.setContext(context);
  },

  beginScroll: function beginScroll() {
    NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.beginScroll();
  },
  endScroll: function endScroll() {
    NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.endScroll();
  }
};

module.exports = FrameRateLogger;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkZyYW1lUmF0ZUxvZ2dlci5qcyJdLCJuYW1lcyI6WyJOYXRpdmVNb2R1bGVzIiwicmVxdWlyZSIsImludmFyaWFudCIsIkZyYW1lUmF0ZUxvZ2dlciIsInNldEdsb2JhbE9wdGlvbnMiLCJvcHRpb25zIiwiZGVidWciLCJ1bmRlZmluZWQiLCJvcHRpb25zQ2xvbmUiLCJyZXBvcnRTdGFja1RyYWNlcyIsIk9iamVjdCIsImZyZWV6ZSIsInNlYWwiLCJzZXRDb250ZXh0IiwiY29udGV4dCIsImJlZ2luU2Nyb2xsIiwiZW5kU2Nyb2xsIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFVQTs7QUFFQSxJQUFNQSxnQkFBZ0JDLFFBQVEsZUFBUixDQUF0Qjs7QUFFQSxJQUFNQyxZQUFZRCxRQUFRLG9CQUFSLENBQWxCOztBQWtCQSxJQUFNRSxrQkFBa0I7QUFLdEJDLG9CQUFrQiwwQkFBU0MsT0FBVCxFQUdmO0FBQ0QsUUFBSUEsUUFBUUMsS0FBUixLQUFrQkMsU0FBdEIsRUFBaUM7QUFDL0JMLGdCQUNFRixjQUFjRyxlQURoQixFQUVFLDREQUZGO0FBSUQ7QUFDRCxRQUFJSCxjQUFjRyxlQUFsQixFQUFtQztBQUlqQyxVQUFNSyxlQUFlO0FBQ25CRixlQUFPLENBQUMsQ0FBQ0QsUUFBUUMsS0FERTtBQUVuQkcsMkJBQW1CLENBQUMsQ0FBQ0osUUFBUUk7QUFGVixPQUFyQjtBQUlBQyxhQUFPQyxNQUFQLENBQWNILFlBQWQ7QUFDQUUsYUFBT0UsSUFBUCxDQUFZSixZQUFaO0FBQ0FSLG9CQUFjRyxlQUFkLENBQThCQyxnQkFBOUIsQ0FBK0NJLFlBQS9DO0FBQ0Q7QUFDRixHQTNCcUI7O0FBaUN0QkssY0FBWSxvQkFBU0MsT0FBVCxFQUEwQjtBQUNwQ2Qsa0JBQWNHLGVBQWQsSUFDRUgsY0FBY0csZUFBZCxDQUE4QlUsVUFBOUIsQ0FBeUNDLE9BQXpDLENBREY7QUFFRCxHQXBDcUI7O0FBMEN0QkMsYUExQ3NCLHlCQTBDUjtBQUNaZixrQkFBY0csZUFBZCxJQUNFSCxjQUFjRyxlQUFkLENBQThCWSxXQUE5QixFQURGO0FBRUQsR0E3Q3FCO0FBbUR0QkMsV0FuRHNCLHVCQW1EVjtBQUNWaEIsa0JBQWNHLGVBQWQsSUFBaUNILGNBQWNHLGVBQWQsQ0FBOEJhLFNBQTlCLEVBQWpDO0FBQ0Q7QUFyRHFCLENBQXhCOztBQXdEQUMsT0FBT0MsT0FBUCxHQUFpQmYsZUFBakIiLCJmaWxlIjoiRnJhbWVSYXRlTG9nZ2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IE5hdGl2ZU1vZHVsZXMgPSByZXF1aXJlKCdOYXRpdmVNb2R1bGVzJyk7XG5cbmNvbnN0IGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuXG4vKipcbiAqIEZsb3cgQVBJIGZvciBuYXRpdmUgRnJhbWVSYXRlTG9nZ2VyIG1vZHVsZS4gSWYgdGhlIG5hdGl2ZSBtb2R1bGUgaXMgbm90IGluc3RhbGxlZCwgZnVuY3Rpb24gY2FsbHNcbiAqIGFyZSBqdXN0IG5vLW9wcy5cbiAqXG4gKiBUeXBpY2FsIGJlaGF2aW9yIGlzIHRoYXQgYHNldENvbnRleHRgIGlzIGNhbGxlZCB3aGVuIGEgbmV3IHNjcmVlbiBpcyBsb2FkZWQgKGUuZy4gdmlhIGFcbiAqIG5hdmlnYXRpb24gaW50ZWdyYXRpb24pLCBhbmQgdGhlbiBgYmVnaW5TY3JvbGxgIGlzIGNhbGxlZCBieSBgU2Nyb2xsUmVzcG9uZGVyYCBhdCB3aGljaCBwb2ludCB0aGVcbiAqIG5hdGl2ZSBtb2R1bGUgdGhlbiBiZWdpbnMgdHJhY2tpbmcgZnJhbWUgZHJvcHMuIFdoZW4gYFNjcm9sbFJlc3BvbmRlcmAgY2FsbHMgYGVuZFNjcm9sbGAsIHRoZVxuICogbmF0aXZlIG1vZHVsZSBnYXRoZXJzIHVwIGFsbCBpdCdzIGZyYW1lIGRyb3AgZGF0YSBhbmQgcmVwb3J0cyBpdCB2aWEgYW4gYW5hbHl0aWNzIHBpcGVsaW5lIGZvclxuICogYW5hbHlzaXMuXG4gKlxuICogTm90ZSB0aGF0IGBiZWdpblNjcm9sbGAgbWF5IGJlIGNhbGxlZCBtdWx0aXBsZSB0aW1lcyBieSBgU2Nyb2xsUmVzcG9uZGVyYCAtIHVuY2xlYXIgaWYgdGhhdCdzIGFcbiAqIGJ1ZywgYnV0IHRoZSBuYXRpdmUgbW9kdWxlIHNob3VsZCBiZSByb2J1c3QgdG8gdGhhdC5cbiAqXG4gKiBJbiB0aGUgZnV0dXJlIHdlIG1heSBhZGQgc3VwcG9ydCBmb3IgdHJhY2tpbmcgZnJhbWUgZHJvcHMgaW4gb3RoZXIgdHlwZXMgb2YgaW50ZXJhY3Rpb25zIGJleW9uZFxuICogc2Nyb2xsaW5nLlxuICovXG5jb25zdCBGcmFtZVJhdGVMb2dnZXIgPSB7XG4gIC8qKlxuICAgKiBFbmFibGUgYGRlYnVnYCB0byBzZWUgbG9jYWwgbG9ncyBvZiB3aGF0J3MgZ29pbmcgb24uIGByZXBvcnRTdGFja1RyYWNlc2Agd2lsbCBncmFiIHN0YWNrIHRyYWNlc1xuICAgKiBkdXJpbmcgVUkgdGhyZWFkIHN0YWxscyBhbmQgdXBsb2FkIHRoZW0gaWYgdGhlIG5hdGl2ZSBtb2R1bGUgc3VwcG9ydHMgaXQuXG4gICAqL1xuICBzZXRHbG9iYWxPcHRpb25zOiBmdW5jdGlvbihvcHRpb25zOiB7XG4gICAgZGVidWc/OiBib29sZWFuLFxuICAgIHJlcG9ydFN0YWNrVHJhY2VzPzogYm9vbGVhbixcbiAgfSkge1xuICAgIGlmIChvcHRpb25zLmRlYnVnICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgTmF0aXZlTW9kdWxlcy5GcmFtZVJhdGVMb2dnZXIsXG4gICAgICAgICdUcnlpbmcgdG8gZGVidWcgRnJhbWVSYXRlTG9nZ2VyIHdpdGhvdXQgdGhlIG5hdGl2ZSBtb2R1bGUhJyxcbiAgICAgICk7XG4gICAgfVxuICAgIGlmIChOYXRpdmVNb2R1bGVzLkZyYW1lUmF0ZUxvZ2dlcikge1xuICAgICAgLy8gRnJlZXplIHRoZSBvYmplY3QgdG8gYXZvaWQgdGhlIHByZXBhY2sgd2FybmluZyAoUFAwMDE3KSBhYm91dCBsZWFraW5nXG4gICAgICAvLyB1bmZyb3plbiBvYmplY3RzLlxuICAgICAgLy8gTmVlZHMgdG8gY2xvbmUgdGhlIG9iamVjdCBmaXJzdCB0byBhdm9pZCBtb2RpZnlpbmcgdGhlIGFyZ3VtZW50LlxuICAgICAgY29uc3Qgb3B0aW9uc0Nsb25lID0ge1xuICAgICAgICBkZWJ1ZzogISFvcHRpb25zLmRlYnVnLFxuICAgICAgICByZXBvcnRTdGFja1RyYWNlczogISFvcHRpb25zLnJlcG9ydFN0YWNrVHJhY2VzLFxuICAgICAgfTtcbiAgICAgIE9iamVjdC5mcmVlemUob3B0aW9uc0Nsb25lKTtcbiAgICAgIE9iamVjdC5zZWFsKG9wdGlvbnNDbG9uZSk7XG4gICAgICBOYXRpdmVNb2R1bGVzLkZyYW1lUmF0ZUxvZ2dlci5zZXRHbG9iYWxPcHRpb25zKG9wdGlvbnNDbG9uZSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBNdXN0IGNhbGwgYHNldENvbnRleHRgIGJlZm9yZSBhbnkgZXZlbnRzIGNhbiBiZSBwcm9wZXJseSB0cmFja2VkLCB3aGljaCBpcyBkb25lIGF1dG9tYXRpY2FsbHlcbiAgICogaW4gYEFwcFJlZ2lzdHJ5YCwgYnV0IG5hdmlnYXRpb24gaXMgYWxzbyBhIGNvbW1vbiBwbGFjZSB0byBob29rIGluLlxuICAgKi9cbiAgc2V0Q29udGV4dDogZnVuY3Rpb24oY29udGV4dDogc3RyaW5nKSB7XG4gICAgTmF0aXZlTW9kdWxlcy5GcmFtZVJhdGVMb2dnZXIgJiZcbiAgICAgIE5hdGl2ZU1vZHVsZXMuRnJhbWVSYXRlTG9nZ2VyLnNldENvbnRleHQoY29udGV4dCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENhbGxlZCBpbiBgU2Nyb2xsUmVzcG9uZGVyYCBzbyBhbnkgY29tcG9uZW50IHRoYXQgdXNlcyB0aGF0IG1vZHVsZSB3aWxsIGhhbmRsZSB0aGlzXG4gICAqIGF1dG9tYXRpY2FsbHkuXG4gICAqL1xuICBiZWdpblNjcm9sbCgpIHtcbiAgICBOYXRpdmVNb2R1bGVzLkZyYW1lUmF0ZUxvZ2dlciAmJlxuICAgICAgTmF0aXZlTW9kdWxlcy5GcmFtZVJhdGVMb2dnZXIuYmVnaW5TY3JvbGwoKTtcbiAgfSxcblxuICAvKipcbiAgICogQ2FsbGVkIGluIGBTY3JvbGxSZXNwb25kZXJgIHNvIGFueSBjb21wb25lbnQgdGhhdCB1c2VzIHRoYXQgbW9kdWxlIHdpbGwgaGFuZGxlIHRoaXNcbiAgICogYXV0b21hdGljYWxseS5cbiAgICovXG4gIGVuZFNjcm9sbCgpIHtcbiAgICBOYXRpdmVNb2R1bGVzLkZyYW1lUmF0ZUxvZ2dlciAmJiBOYXRpdmVNb2R1bGVzLkZyYW1lUmF0ZUxvZ2dlci5lbmRTY3JvbGwoKTtcbiAgfSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRnJhbWVSYXRlTG9nZ2VyO1xuIl19